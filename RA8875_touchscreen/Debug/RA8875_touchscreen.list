
RA8875_touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003764  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080038ec  080038ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003914  08003914  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800391c  0800391c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000020  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000003c  2000003c  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a029  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c9d  00000000  00000000  0002a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000868  00000000  00000000  0002bd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000645  00000000  00000000  0002c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002336a  00000000  00000000  0002cc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a08d  00000000  00000000  0004ff6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c822e  00000000  00000000  00059ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000021cc  00000000  00000000  0012222c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  001243f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038d4 	.word	0x080038d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080038d4 	.word	0x080038d4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Error_Handler>:

#include "error_handler.hpp"

extern "C" {
void Error_Handler(void)
	{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
		while(1) {}
 80004d8:	e7fe      	b.n	80004d8 <Error_Handler+0x4>
	...

080004dc <main>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.hpp"

int main(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b0af      	sub	sp, #188	; 0xbc
 80004e0:	af04      	add	r7, sp, #16
    HAL_Init();
 80004e2:	f002 f971 	bl	80027c8 <HAL_Init>

    SystemClock_Config(SYS_CLOCK_FREQ_48_MHZ);
 80004e6:	2030      	movs	r0, #48	; 0x30
 80004e8:	f000 f946 	bl	8000778 <SystemClock_Config>

	Adafruit_RA8875 tft = Adafruit_RA8875(csPort, csPin, rstPort, rstPin);
 80004ec:	4b9e      	ldr	r3, [pc, #632]	; (8000768 <main+0x28c>)
 80004ee:	6819      	ldr	r1, [r3, #0]
 80004f0:	4b9e      	ldr	r3, [pc, #632]	; (800076c <main+0x290>)
 80004f2:	881a      	ldrh	r2, [r3, #0]
 80004f4:	4b9e      	ldr	r3, [pc, #632]	; (8000770 <main+0x294>)
 80004f6:	681c      	ldr	r4, [r3, #0]
 80004f8:	4b9e      	ldr	r3, [pc, #632]	; (8000774 <main+0x298>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	1d38      	adds	r0, r7, #4
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	4623      	mov	r3, r4
 8000502:	f000 fa39 	bl	8000978 <_ZN15Adafruit_RA8875C1EP12GPIO_TypeDeftS1_t>

      /* Initialize the display using 'RA8875_480x80', 'RA8875_480x128', 'RA8875_480x272' or 'RA8875_800x480' */
    if (!tft.begin(RA8875_800x480)) {
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2103      	movs	r1, #3
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fa76 	bl	80009fc <_ZN15Adafruit_RA88755beginE11RA8875sizes>
 8000510:	4603      	mov	r3, r0
 8000512:	f083 0301 	eor.w	r3, r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <main+0x44>
        Error_Handler();
 800051c:	f7ff ffda 	bl	80004d4 <Error_Handler>
    }

    tft.displayOn(true);
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2101      	movs	r1, #1
 8000524:	4618      	mov	r0, r3
 8000526:	f001 fd85 	bl	8002034 <_ZN15Adafruit_RA88759displayOnEb>
    tft.GPIOX(true);      // Enable TFT - display enable tied to GPIOX
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fcef 	bl	8001f12 <_ZN15Adafruit_RA88755GPIOXEb>
    tft.PWM1config(true, RA8875_PWM_CLK_DIV1024); // PWM output for backlight
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	220a      	movs	r2, #10
 8000538:	2101      	movs	r1, #1
 800053a:	4618      	mov	r0, r3
 800053c:	f001 fd11 	bl	8001f62 <_ZN15Adafruit_RA887510PWM1configEbh>
    tft.PWM1out(255);
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	21ff      	movs	r1, #255	; 0xff
 8000544:	4618      	mov	r0, r3
 8000546:	f001 fcfc 	bl	8001f42 <_ZN15Adafruit_RA88757PWM1outEh>

    // With hardware acceleration this is instant
    tft.fillScreen(RA8875_WHITE);
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fe68 	bl	8001226 <_ZN15Adafruit_RA887510fillScreenEt>

    // Play with PWM
    for (uint8_t i=255; i!=0; i-=5 )
 8000556:	23ff      	movs	r3, #255	; 0xff
 8000558:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800055c:	e00e      	b.n	800057c <main+0xa0>
    {
        tft.PWM1out(i);
 800055e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	4611      	mov	r1, r2
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fceb 	bl	8001f42 <_ZN15Adafruit_RA88757PWM1outEh>
        HAL_Delay(10);
 800056c:	200a      	movs	r0, #10
 800056e:	f002 f9a5 	bl	80028bc <HAL_Delay>
    for (uint8_t i=255; i!=0; i-=5 )
 8000572:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000576:	3b05      	subs	r3, #5
 8000578:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800057c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1ec      	bne.n	800055e <main+0x82>
    }
    for (uint8_t i=0; i!=255; i+=5 )
 8000584:	2300      	movs	r3, #0
 8000586:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 800058a:	e00e      	b.n	80005aa <main+0xce>
    {
        tft.PWM1out(i);
 800058c:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4611      	mov	r1, r2
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fcd4 	bl	8001f42 <_ZN15Adafruit_RA88757PWM1outEh>
        HAL_Delay(10);
 800059a:	200a      	movs	r0, #10
 800059c:	f002 f98e 	bl	80028bc <HAL_Delay>
    for (uint8_t i=0; i!=255; i+=5 )
 80005a0:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80005a4:	3305      	adds	r3, #5
 80005a6:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 80005aa:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80005ae:	2bff      	cmp	r3, #255	; 0xff
 80005b0:	d1ec      	bne.n	800058c <main+0xb0>
    }
    tft.PWM1out(255);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	21ff      	movs	r1, #255	; 0xff
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fcc3 	bl	8001f42 <_ZN15Adafruit_RA88757PWM1outEh>

    tft.fillScreen(RA8875_RED);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fe2f 	bl	8001226 <_ZN15Adafruit_RA887510fillScreenEt>
    HAL_Delay(500);
 80005c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005cc:	f002 f976 	bl	80028bc <HAL_Delay>
    tft.fillScreen(RA8875_YELLOW);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fe25 	bl	8001226 <_ZN15Adafruit_RA887510fillScreenEt>
    HAL_Delay(500);
 80005dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e0:	f002 f96c 	bl	80028bc <HAL_Delay>
    tft.fillScreen(RA8875_GREEN);
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fe1b 	bl	8001226 <_ZN15Adafruit_RA887510fillScreenEt>
    HAL_Delay(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f4:	f002 f962 	bl	80028bc <HAL_Delay>
    tft.fillScreen(RA8875_CYAN);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fe11 	bl	8001226 <_ZN15Adafruit_RA887510fillScreenEt>
    HAL_Delay(500);
 8000604:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000608:	f002 f958 	bl	80028bc <HAL_Delay>
    tft.fillScreen(RA8875_MAGENTA);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fe07 	bl	8001226 <_ZN15Adafruit_RA887510fillScreenEt>
    HAL_Delay(500);
 8000618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061c:	f002 f94e 	bl	80028bc <HAL_Delay>
    tft.fillScreen(RA8875_BLACK);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fdfe 	bl	8001226 <_ZN15Adafruit_RA887510fillScreenEt>

    // Try some GFX acceleration!
    tft.drawCircle(100, 100, 50, RA8875_BLACK);
 800062a:	1d38      	adds	r0, r7, #4
 800062c:	2300      	movs	r3, #0
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2332      	movs	r3, #50	; 0x32
 8000632:	2264      	movs	r2, #100	; 0x64
 8000634:	2164      	movs	r1, #100	; 0x64
 8000636:	f000 fe17 	bl	8001268 <_ZN15Adafruit_RA887510drawCircleEssst>
    tft.fillCircle(100, 100, 49, RA8875_GREEN);
 800063a:	1d38      	adds	r0, r7, #4
 800063c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2331      	movs	r3, #49	; 0x31
 8000644:	2264      	movs	r2, #100	; 0x64
 8000646:	2164      	movs	r1, #100	; 0x64
 8000648:	f000 fe2d 	bl	80012a6 <_ZN15Adafruit_RA887510fillCircleEssst>

    tft.fillRect(11, 11, 398, 198, RA8875_BLUE);
 800064c:	1d38      	adds	r0, r7, #4
 800064e:	231f      	movs	r3, #31
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	23c6      	movs	r3, #198	; 0xc6
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 800065a:	220b      	movs	r2, #11
 800065c:	210b      	movs	r1, #11
 800065e:	f000 fdb5 	bl	80011cc <_ZN15Adafruit_RA88758fillRectEsssst>
    tft.drawRect(10, 10, 400, 200, RA8875_GREEN);
 8000662:	1d38      	adds	r0, r7, #4
 8000664:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	23c8      	movs	r3, #200	; 0xc8
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000672:	220a      	movs	r2, #10
 8000674:	210a      	movs	r1, #10
 8000676:	f000 fd7c 	bl	8001172 <_ZN15Adafruit_RA88758drawRectEsssst>
    tft.fillRoundRect(200, 10, 200, 100, 10, RA8875_RED);
 800067a:	1d38      	adds	r0, r7, #4
 800067c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	230a      	movs	r3, #10
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	23c8      	movs	r3, #200	; 0xc8
 800068c:	220a      	movs	r2, #10
 800068e:	21c8      	movs	r1, #200	; 0xc8
 8000690:	f000 ff04 	bl	800149c <_ZN15Adafruit_RA887513fillRoundRectEssssst>
    tft.drawPixel(10,10,RA8875_BLACK);
 8000694:	1d38      	adds	r0, r7, #4
 8000696:	2300      	movs	r3, #0
 8000698:	220a      	movs	r2, #10
 800069a:	210a      	movs	r1, #10
 800069c:	f000 fc3b 	bl	8000f16 <_ZN15Adafruit_RA88759drawPixelEsst>
    tft.drawPixel(11,11,RA8875_BLACK);
 80006a0:	1d38      	adds	r0, r7, #4
 80006a2:	2300      	movs	r3, #0
 80006a4:	220b      	movs	r2, #11
 80006a6:	210b      	movs	r1, #11
 80006a8:	f000 fc35 	bl	8000f16 <_ZN15Adafruit_RA88759drawPixelEsst>
    tft.drawLine(10, 10, 200, 100, RA8875_RED);
 80006ac:	1d38      	adds	r0, r7, #4
 80006ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	2364      	movs	r3, #100	; 0x64
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	23c8      	movs	r3, #200	; 0xc8
 80006ba:	220a      	movs	r2, #10
 80006bc:	210a      	movs	r1, #10
 80006be:	f000 fc96 	bl	8000fee <_ZN15Adafruit_RA88758drawLineEsssst>
    tft.drawTriangle(200, 15, 250, 100, 150, 125, RA8875_BLACK);
 80006c2:	1d38      	adds	r0, r7, #4
 80006c4:	2300      	movs	r3, #0
 80006c6:	9303      	str	r3, [sp, #12]
 80006c8:	237d      	movs	r3, #125	; 0x7d
 80006ca:	9302      	str	r3, [sp, #8]
 80006cc:	2396      	movs	r3, #150	; 0x96
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	23fa      	movs	r3, #250	; 0xfa
 80006d6:	220f      	movs	r2, #15
 80006d8:	21c8      	movs	r1, #200	; 0xc8
 80006da:	f000 fe03 	bl	80012e4 <_ZN15Adafruit_RA887512drawTriangleEsssssst>
    tft.fillTriangle(200, 16, 249, 99, 151, 124, RA8875_YELLOW);
 80006de:	1d38      	adds	r0, r7, #4
 80006e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80006e4:	9303      	str	r3, [sp, #12]
 80006e6:	237c      	movs	r3, #124	; 0x7c
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2397      	movs	r3, #151	; 0x97
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2363      	movs	r3, #99	; 0x63
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	23f9      	movs	r3, #249	; 0xf9
 80006f4:	2210      	movs	r2, #16
 80006f6:	21c8      	movs	r1, #200	; 0xc8
 80006f8:	f000 fe1c 	bl	8001334 <_ZN15Adafruit_RA887512fillTriangleEsssssst>
    tft.drawEllipse(300, 100, 100, 40, RA8875_BLACK);
 80006fc:	1d38      	adds	r0, r7, #4
 80006fe:	2300      	movs	r3, #0
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2328      	movs	r3, #40	; 0x28
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2264      	movs	r2, #100	; 0x64
 800070a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800070e:	f000 fe39 	bl	8001384 <_ZN15Adafruit_RA887511drawEllipseEsssst>
    tft.fillEllipse(300, 100, 98, 38, RA8875_GREEN);
 8000712:	1d38      	adds	r0, r7, #4
 8000714:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	2326      	movs	r3, #38	; 0x26
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2362      	movs	r3, #98	; 0x62
 8000720:	2264      	movs	r2, #100	; 0x64
 8000722:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000726:	f000 fe4f 	bl	80013c8 <_ZN15Adafruit_RA887511fillEllipseEsssst>
    // Argument 5 (curvePart) is a 2-bit value to control each corner (select 0, 1, 2, or 3)
    tft.drawCurve(50, 100, 80, 40, 2, RA8875_BLACK);
 800072a:	1d38      	adds	r0, r7, #4
 800072c:	2300      	movs	r3, #0
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	2302      	movs	r3, #2
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	2328      	movs	r3, #40	; 0x28
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2350      	movs	r3, #80	; 0x50
 800073a:	2264      	movs	r2, #100	; 0x64
 800073c:	2132      	movs	r1, #50	; 0x32
 800073e:	f000 fe65 	bl	800140c <_ZN15Adafruit_RA88759drawCurveEssssht>
    tft.fillCurve(50, 100, 78, 38, 2, RA8875_WHITE);
 8000742:	1d38      	adds	r0, r7, #4
 8000744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000748:	9302      	str	r3, [sp, #8]
 800074a:	2302      	movs	r3, #2
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	2326      	movs	r3, #38	; 0x26
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	234e      	movs	r3, #78	; 0x4e
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	2132      	movs	r1, #50	; 0x32
 8000758:	f000 fe7c 	bl	8001454 <_ZN15Adafruit_RA88759fillCurveEssssht>

    // pinMode(RA8875_INT, INPUT);
    // digitalWrite(RA8875_INT, HIGH);

    tft.touchEnable(true);
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2101      	movs	r1, #1
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fc23 	bl	8001fac <_ZN15Adafruit_RA887511touchEnableEb>

    while (1)
 8000766:	e7fe      	b.n	8000766 <main+0x28a>
 8000768:	20000000 	.word	0x20000000
 800076c:	20000004 	.word	0x20000004
 8000770:	20000008 	.word	0x20000008
 8000774:	2000000c 	.word	0x2000000c

08000778 <SystemClock_Config>:
}

// C functions needed by HAL
extern "C" {
    void SystemClock_Config(uint8_t clock_freq)
    {
 8000778:	b580      	push	{r7, lr}
 800077a:	b096      	sub	sp, #88	; 0x58
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
        RCC_OscInitTypeDef osc_init;
        RCC_ClkInitTypeDef clk_init;

        uint32_t FLatency = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	657b      	str	r3, [r7, #84]	; 0x54

        osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000786:	2302      	movs	r3, #2
 8000788:	623b      	str	r3, [r7, #32]
        osc_init.HSIState = RCC_HSI_ON;
 800078a:	2301      	movs	r3, #1
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
        osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	2310      	movs	r3, #16
 8000790:	633b      	str	r3, [r7, #48]	; 0x30
        osc_init.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
        osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000796:	2300      	movs	r3, #0
 8000798:	63fb      	str	r3, [r7, #60]	; 0x3c

        switch(clock_freq)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b78      	cmp	r3, #120	; 0x78
 800079e:	d034      	beq.n	800080a <SystemClock_Config+0x92>
 80007a0:	2b78      	cmp	r3, #120	; 0x78
 80007a2:	dc7d      	bgt.n	80008a0 <SystemClock_Config+0x128>
 80007a4:	2b30      	cmp	r3, #48	; 0x30
 80007a6:	d002      	beq.n	80007ae <SystemClock_Config+0x36>
 80007a8:	2b48      	cmp	r3, #72	; 0x48
 80007aa:	d017      	beq.n	80007dc <SystemClock_Config+0x64>
                FLatency = FLASH_ACR_LATENCY_1WS;

                break;
            }
            default:
                return;
 80007ac:	e078      	b.n	80008a0 <SystemClock_Config+0x128>
                osc_init.PLL.PLLM = 8;
 80007ae:	2308      	movs	r3, #8
 80007b0:	643b      	str	r3, [r7, #64]	; 0x40
                osc_init.PLL.PLLN = 96;
 80007b2:	2360      	movs	r3, #96	; 0x60
 80007b4:	647b      	str	r3, [r7, #68]	; 0x44
                osc_init.PLL.PLLP = 4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
                osc_init.PLL.PLLQ = 4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
                clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007be:	230f      	movs	r3, #15
 80007c0:	60fb      	str	r3, [r7, #12]
                clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	613b      	str	r3, [r7, #16]
                clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
                clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	61bb      	str	r3, [r7, #24]
                clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d4:	61fb      	str	r3, [r7, #28]
                FLatency = FLASH_ACR_LATENCY_1WS;
 80007d6:	2301      	movs	r3, #1
 80007d8:	657b      	str	r3, [r7, #84]	; 0x54
                break;
 80007da:	e02d      	b.n	8000838 <SystemClock_Config+0xc0>
                osc_init.PLL.PLLM = 8;
 80007dc:	2308      	movs	r3, #8
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
                osc_init.PLL.PLLN = 72;
 80007e0:	2348      	movs	r3, #72	; 0x48
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
                osc_init.PLL.PLLP = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
                osc_init.PLL.PLLQ = 3;
 80007e8:	2303      	movs	r3, #3
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
                clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
                clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
                clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	617b      	str	r3, [r7, #20]
                clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	61bb      	str	r3, [r7, #24]
                clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	61fb      	str	r3, [r7, #28]
                FLatency = FLASH_ACR_LATENCY_1WS;
 8000804:	2301      	movs	r3, #1
 8000806:	657b      	str	r3, [r7, #84]	; 0x54
                break;
 8000808:	e016      	b.n	8000838 <SystemClock_Config+0xc0>
                osc_init.PLL.PLLM = 8;
 800080a:	2308      	movs	r3, #8
 800080c:	643b      	str	r3, [r7, #64]	; 0x40
                osc_init.PLL.PLLN = 120;
 800080e:	2378      	movs	r3, #120	; 0x78
 8000810:	647b      	str	r3, [r7, #68]	; 0x44
                osc_init.PLL.PLLP = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
                osc_init.PLL.PLLQ = 5;
 8000816:	2305      	movs	r3, #5
 8000818:	64fb      	str	r3, [r7, #76]	; 0x4c
                clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800081a:	230f      	movs	r3, #15
 800081c:	60fb      	str	r3, [r7, #12]
                clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	613b      	str	r3, [r7, #16]
                clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	617b      	str	r3, [r7, #20]
                clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	61bb      	str	r3, [r7, #24]
                clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	61fb      	str	r3, [r7, #28]
                FLatency = FLASH_ACR_LATENCY_1WS;
 8000832:	2301      	movs	r3, #1
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
                break;
 8000836:	bf00      	nop
        }
        if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4618      	mov	r0, r3
 800083e:	f002 fb19 	bl	8002e74 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xde>
        {
            Error_Handler();
 8000852:	f7ff fe3f 	bl	80004d4 <Error_Handler>
        }

        if (HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800085c:	4618      	mov	r0, r3
 800085e:	f002 fd81 	bl	8003364 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xfe>
        {
            Error_Handler();
 8000872:	f7ff fe2f 	bl	80004d4 <Error_Handler>
        }

        /*Configure the systick timer interrupt frequency (for every 1 ms) */
        uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000876:	f002 ff61 	bl	800373c <HAL_RCC_GetHCLKFreq>
 800087a:	6538      	str	r0, [r7, #80]	; 0x50
        HAL_SYSTICK_Config(hclk_freq/1000);
 800087c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <SystemClock_Config+0x130>)
 8000880:	fba2 2303 	umull	r2, r3, r2, r3
 8000884:	099b      	lsrs	r3, r3, #6
 8000886:	4618      	mov	r0, r3
 8000888:	f002 f915 	bl	8002ab6 <HAL_SYSTICK_Config>

        /**Configure the Systick
        */
        HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800088c:	2004      	movs	r0, #4
 800088e:	f002 f91f 	bl	8002ad0 <HAL_SYSTICK_CLKSourceConfig>

        /* SysTick_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	f04f 30ff 	mov.w	r0, #4294967295
 800089a:	f002 f8f0 	bl	8002a7e <HAL_NVIC_SetPriority>
 800089e:	e000      	b.n	80008a2 <SystemClock_Config+0x12a>
                return;
 80008a0:	bf00      	nop
    }
 80008a2:	3758      	adds	r7, #88	; 0x58
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	10624dd3 	.word	0x10624dd3

080008ac <SysTick_Handler>:
 *      Author: jarla
 */
#include "stm32f4xx_hal.h"

void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80008b0:	f001 ffe4 	bl	800287c <HAL_IncTick>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <_ZN15Adafruit_RA88755writeEh>:
     @param b The string to write

     @return The number of bytes written
   */
  /**************************************************************************/
  virtual size_t write(uint8_t b) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
    textWrite((const char *)&b, 1);
 80008e8:	1cfb      	adds	r3, r7, #3
 80008ea:	2201      	movs	r2, #1
 80008ec:	4619      	mov	r1, r3
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 fa85 	bl	8000dfe <_ZN15Adafruit_RA88759textWriteEPKct>
    return 1;
 80008f4:	2301      	movs	r3, #1
  }
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_ZN15Adafruit_RA88755writeEPKhj>:
       @param size The size of the buffer

       @return The number of bytes written
   */
  /**************************************************************************/
  virtual size_t write(const uint8_t *buffer, size_t size) {
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
    textWrite((const char *)buffer, size);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	b29b      	uxth	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	68b9      	ldr	r1, [r7, #8]
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f000 fa73 	bl	8000dfe <_ZN15Adafruit_RA88759textWriteEPKct>
    return size;
 8000918:	687b      	ldr	r3, [r7, #4]
  }
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <_ZN15Adafruit_RA887512getSPIConfigEv>:
#endif

private:
  static SPI_Config getSPIConfig(void)
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    return {
      .SPI_DeviceMode = DEVICE_MODE_MASTER,
      .SPI_Mode = SPI_MODE_1,
      .SPI_BaudRate = BR_DIV32,
      .SPIx = SPI1
    };
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <_ZN15Adafruit_RA887512getSPIConfigEv+0x20>)
 8000930:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000934:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	080038ec 	.word	0x080038ec

08000948 <_ZN15Adafruit_RA88754swapERsS0_>:

  /* Rotation Functions */
  int16_t applyRotationX(int16_t x);
  int16_t applyRotationY(int16_t y);

  void swap(int16_t &x, int16_t &y) {
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
    int16_t temp = x;
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	82fb      	strh	r3, [r7, #22]
    x = y;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	801a      	strh	r2, [r3, #0]
    y = temp;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	8afa      	ldrh	r2, [r7, #22]
 8000968:	801a      	strh	r2, [r3, #0]
  }
 800096a:	bf00      	nop
 800096c:	371c      	adds	r7, #28
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <_ZN15Adafruit_RA8875C1EP12GPIO_TypeDeftS1_t>:
      @param CS_pin   Location of the SPI chip select pin
      @param RST_Port Pointer to the reset port
      @param RST_pin  Location of the reset pin
*/
/**************************************************************************/
Adafruit_RA8875::Adafruit_RA8875(GPIO_TypeDef* CS_Port, uint16_t CS_pin, 
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af02      	add	r7, sp, #8
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	4613      	mov	r3, r2
 8000986:	80fb      	strh	r3, [r7, #6]
                                 GPIO_TypeDef* RST_Port, uint16_t RST_pin):
  _cs(CS_Port, CS_pin, PP_OUTPUT_MODE, NO_PULL),
  _rst(RST_Port, RST_pin, PP_OUTPUT_MODE, NO_PULL),
  _spi(getSPIConfig())
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <_ZN15Adafruit_RA8875C1EP12GPIO_TypeDeftS1_t+0x80>)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	601a      	str	r2, [r3, #0]
  _cs(CS_Port, CS_pin, PP_OUTPUT_MODE, NO_PULL),
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f103 0010 	add.w	r0, r3, #16
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	2300      	movs	r3, #0
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2300      	movs	r3, #0
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	f001 fc11 	bl	80021c4 <_ZN4GPIOC1EP12GPIO_TypeDefthh>
  _rst(RST_Port, RST_pin, PP_OUTPUT_MODE, NO_PULL),
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f103 0018 	add.w	r0, r3, #24
 80009a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80009aa:	2300      	movs	r3, #0
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	6839      	ldr	r1, [r7, #0]
 80009b2:	f001 fc07 	bl	80021c4 <_ZN4GPIOC1EP12GPIO_TypeDefthh>
  _spi(getSPIConfig())
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f103 0420 	add.w	r4, r3, #32
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ffaf 	bl	8000924 <_ZN15Adafruit_RA887512getSPIConfigEv>
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	4620      	mov	r0, r4
 80009ce:	f001 fcf1 	bl	80023b4 <_ZN3SPIC1ERK10SPI_Config>
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2275      	movs	r2, #117	; 0x75
 80009d6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
{
  _width = 800;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80009e0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
  _height = 480;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80009ea:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
}
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4618      	mov	r0, r3
 80009f2:	371c      	adds	r7, #28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	0800390c 	.word	0x0800390c

080009fc <_ZN15Adafruit_RA88755beginE11RA8875sizes>:
                  'RA8875_800x480' (5" and 7" displays)

      @return True if we reached the end
*/
/**************************************************************************/
bool Adafruit_RA8875::begin(enum RA8875sizes s) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
  _size = s;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	78fa      	ldrb	r2, [r7, #3]
 8000a0c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

  if (_size == RA8875_480x80) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d109      	bne.n	8000a2e <_ZN15Adafruit_RA88755beginE11RA8875sizes+0x32>
    _width = 480;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a20:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    _height = 80;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2250      	movs	r2, #80	; 0x50
 8000a28:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8000a2c:	e030      	b.n	8000a90 <_ZN15Adafruit_RA88755beginE11RA8875sizes+0x94>
  } else if (_size == RA8875_480x128) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d109      	bne.n	8000a4c <_ZN15Adafruit_RA88755beginE11RA8875sizes+0x50>
    _width = 480;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a3e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    _height = 128;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8000a4a:	e021      	b.n	8000a90 <_ZN15Adafruit_RA88755beginE11RA8875sizes+0x94>
  } else if (_size == RA8875_480x272) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d10a      	bne.n	8000a6c <_ZN15Adafruit_RA88755beginE11RA8875sizes+0x70>
    _width = 480;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a5c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    _height = 272;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000a66:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8000a6a:	e011      	b.n	8000a90 <_ZN15Adafruit_RA88755beginE11RA8875sizes+0x94>
  } else if (_size == RA8875_800x480) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d10a      	bne.n	8000a8c <_ZN15Adafruit_RA88755beginE11RA8875sizes+0x90>
    _width = 800;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000a7c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    _height = 480;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a86:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8000a8a:	e001      	b.n	8000a90 <_ZN15Adafruit_RA88755beginE11RA8875sizes+0x94>
  } else {
    return false;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e031      	b.n	8000af4 <_ZN15Adafruit_RA88755beginE11RA8875sizes+0xf8>
  }
  _rotation = 0;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  // Initialize CS and RST pins as outputs
//  _cs.init(PP_OUTPUT_MODE, NO_PULL);
//  _rst.init(PP_OUTPUT_MODE, NO_PULL);

  // write CS high and keep it high
  _cs.write(GPIO_PIN_SET);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3310      	adds	r3, #16
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fc76 	bl	8002390 <_ZN4GPIO5writeE13GPIO_PinState>

  // write RST low then high
  _rst.write(GPIO_PIN_RESET);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3318      	adds	r3, #24
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fc70 	bl	8002390 <_ZN4GPIO5writeE13GPIO_PinState>
  HAL_Delay(100);
 8000ab0:	2064      	movs	r0, #100	; 0x64
 8000ab2:	f001 ff03 	bl	80028bc <HAL_Delay>
  _rst.write(GPIO_PIN_SET);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3318      	adds	r3, #24
 8000aba:	2101      	movs	r1, #1
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fc67 	bl	8002390 <_ZN4GPIO5writeE13GPIO_PinState>
  HAL_Delay(100);
 8000ac2:	2064      	movs	r0, #100	; 0x64
 8000ac4:	f001 fefa 	bl	80028bc <HAL_Delay>

  // Initialize SPI
  _spi.begin();
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3320      	adds	r3, #32
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 fe1f 	bl	8002710 <_ZN3SPI5beginEv>

  uint8_t x = readReg(0);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f001 fadb 	bl	8002090 <_ZN15Adafruit_RA88757readRegEh>
 8000ada:	4603      	mov	r3, r0
 8000adc:	73fb      	strb	r3, [r7, #15]
  //    Serial.print("x = 0x"); Serial.println(x,HEX);
  if (x != 0x75) {
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	2b75      	cmp	r3, #117	; 0x75
 8000ae2:	d003      	beq.n	8000aec <_ZN15Adafruit_RA88755beginE11RA8875sizes+0xf0>
    Error_Handler();  // Wrong or no device detected
 8000ae4:	f7ff fcf6 	bl	80004d4 <Error_Handler>
    return false;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e003      	b.n	8000af4 <_ZN15Adafruit_RA88755beginE11RA8875sizes+0xf8>
  }

  initialize();
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 f83e 	bl	8000b6e <_ZN15Adafruit_RA887510initializeEv>

  return true;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN15Adafruit_RA88757PLLinitEv>:
/**************************************************************************/
/*!
      Initialise the PLL
*/
/**************************************************************************/
void Adafruit_RA8875::PLLinit(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if (_size == RA8875_480x80 || _size == RA8875_480x128 ||
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d009      	beq.n	8000b22 <_ZN15Adafruit_RA88757PLLinitEv+0x26>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d004      	beq.n	8000b22 <_ZN15Adafruit_RA88757PLLinitEv+0x26>
      _size == RA8875_480x272) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
  if (_size == RA8875_480x80 || _size == RA8875_480x128 ||
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d110      	bne.n	8000b44 <_ZN15Adafruit_RA88757PLLinitEv+0x48>
    writeReg(RA8875_PLLC1, RA8875_PLLC1_PLLDIV1 + 10);
 8000b22:	220a      	movs	r2, #10
 8000b24:	2188      	movs	r1, #136	; 0x88
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f001 fa9c 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
    HAL_Delay(1);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f001 fec5 	bl	80028bc <HAL_Delay>
    writeReg(RA8875_PLLC2, RA8875_PLLC2_DIV4);
 8000b32:	2202      	movs	r2, #2
 8000b34:	2189      	movs	r1, #137	; 0x89
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f001 fa94 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
    HAL_Delay(1);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f001 febd 	bl	80028bc <HAL_Delay>
 8000b42:	e010      	b.n	8000b66 <_ZN15Adafruit_RA88757PLLinitEv+0x6a>
  } else /* (_size == RA8875_800x480) */ {
    writeReg(RA8875_PLLC1, RA8875_PLLC1_PLLDIV1 + 11);
 8000b44:	220b      	movs	r2, #11
 8000b46:	2188      	movs	r1, #136	; 0x88
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f001 fa8b 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
    HAL_Delay(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f001 feb4 	bl	80028bc <HAL_Delay>
    writeReg(RA8875_PLLC2, RA8875_PLLC2_DIV4);
 8000b54:	2202      	movs	r2, #2
 8000b56:	2189      	movs	r1, #137	; 0x89
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f001 fa83 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
    HAL_Delay(1);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f001 feac 	bl	80028bc <HAL_Delay>
  }
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_ZN15Adafruit_RA887510initializeEv>:
/**************************************************************************/
/*!
      Initialises the driver IC (clock setup, etc.)
*/
/**************************************************************************/
void Adafruit_RA8875::initialize(void) {
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  PLLinit();
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffc0 	bl	8000afc <_ZN15Adafruit_RA88757PLLinitEv>
  writeReg(RA8875_SYSR, RA8875_SYSR_16BPP | RA8875_SYSR_MCU8);
 8000b7c:	220c      	movs	r2, #12
 8000b7e:	2110      	movs	r1, #16
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f001 fa6f 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  uint8_t vsync_pw;
  uint16_t vsync_nondisp;
  uint16_t vsync_start;

  /* Set the correct values for the display being used */
  if (_size == RA8875_480x80) {
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d114      	bne.n	8000bba <_ZN15Adafruit_RA887510initializeEv+0x4c>
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_4CLK;
 8000b90:	2382      	movs	r3, #130	; 0x82
 8000b92:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 10;
 8000b94:	230a      	movs	r3, #10
 8000b96:	74fb      	strb	r3, [r7, #19]
    hsync_start = 8;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 48;
 8000b9c:	2330      	movs	r3, #48	; 0x30
 8000b9e:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 3;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	823b      	strh	r3, [r7, #16]
    vsync_start = 8;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 10;
 8000bac:	230a      	movs	r3, #10
 8000bae:	74bb      	strb	r3, [r7, #18]
    _voffset = 192; // This uses the bottom 80 pixels of a 272 pixel controller
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	22c0      	movs	r2, #192	; 0xc0
 8000bb4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8000bb8:	e032      	b.n	8000c20 <_ZN15Adafruit_RA887510initializeEv+0xb2>
  } else if (_size == RA8875_480x128 || _size == RA8875_480x272) {
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d004      	beq.n	8000bce <_ZN15Adafruit_RA887510initializeEv+0x60>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d114      	bne.n	8000bf8 <_ZN15Adafruit_RA887510initializeEv+0x8a>
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_4CLK;
 8000bce:	2382      	movs	r3, #130	; 0x82
 8000bd0:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 10;
 8000bd2:	230a      	movs	r3, #10
 8000bd4:	74fb      	strb	r3, [r7, #19]
    hsync_start = 8;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 48;
 8000bda:	2330      	movs	r3, #48	; 0x30
 8000bdc:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 3;
 8000be2:	2303      	movs	r3, #3
 8000be4:	823b      	strh	r3, [r7, #16]
    vsync_start = 8;
 8000be6:	2308      	movs	r3, #8
 8000be8:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 10;
 8000bea:	230a      	movs	r3, #10
 8000bec:	74bb      	strb	r3, [r7, #18]
    _voffset = 0;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8000bf6:	e013      	b.n	8000c20 <_ZN15Adafruit_RA887510initializeEv+0xb2>
  } else // (_size == RA8875_800x480)
  {
    pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_2CLK;
 8000bf8:	2381      	movs	r3, #129	; 0x81
 8000bfa:	75fb      	strb	r3, [r7, #23]
    hsync_nondisp = 26;
 8000bfc:	231a      	movs	r3, #26
 8000bfe:	74fb      	strb	r3, [r7, #19]
    hsync_start = 32;
 8000c00:	2320      	movs	r3, #32
 8000c02:	75bb      	strb	r3, [r7, #22]
    hsync_pw = 96;
 8000c04:	2360      	movs	r3, #96	; 0x60
 8000c06:	757b      	strb	r3, [r7, #21]
    hsync_finetune = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	753b      	strb	r3, [r7, #20]
    vsync_nondisp = 32;
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	823b      	strh	r3, [r7, #16]
    vsync_start = 23;
 8000c10:	2317      	movs	r3, #23
 8000c12:	81fb      	strh	r3, [r7, #14]
    vsync_pw = 2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	74bb      	strb	r3, [r7, #18]
    _voffset = 0;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  writeReg(RA8875_PCSR, pixclk);
 8000c20:	7dfb      	ldrb	r3, [r7, #23]
 8000c22:	461a      	mov	r2, r3
 8000c24:	2104      	movs	r1, #4
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f001 fa1c 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f001 fe45 	bl	80028bc <HAL_Delay>

  /* Horizontal settings registers */
  writeReg(RA8875_HDWR, (_width / 8) - 1); // H width: (HDWR + 1) * 8 = 480
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8000c38:	08db      	lsrs	r3, r3, #3
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	2114      	movs	r1, #20
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f001 fa0c 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_HNDFTR, RA8875_HNDFTR_DE_HIGH + hsync_finetune);
 8000c4c:	7d3b      	ldrb	r3, [r7, #20]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	2115      	movs	r1, #21
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f001 fa06 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_HNDR, (hsync_nondisp - hsync_finetune - 2) /
 8000c58:	7cfa      	ldrb	r2, [r7, #19]
 8000c5a:	7d3b      	ldrb	r3, [r7, #20]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	3b02      	subs	r3, #2
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	da00      	bge.n	8000c66 <_ZN15Adafruit_RA887510initializeEv+0xf8>
 8000c64:	3307      	adds	r3, #7
 8000c66:	10db      	asrs	r3, r3, #3
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2116      	movs	r1, #22
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f001 f9f8 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
                            8); // H non-display: HNDR * 8 + HNDFTR + 2 = 10
  writeReg(RA8875_HSTR, hsync_start / 8 - 1); // Hsync start: (HSTR + 1)*8
 8000c74:	7dbb      	ldrb	r3, [r7, #22]
 8000c76:	08db      	lsrs	r3, r3, #3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	2117      	movs	r1, #23
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f001 f9ee 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_HPWR,
           RA8875_HPWR_LOW +
               (hsync_pw / 8 - 1)); // HSync pulse width = (HPWR+1) * 8
 8000c88:	7d7b      	ldrb	r3, [r7, #21]
 8000c8a:	08db      	lsrs	r3, r3, #3
 8000c8c:	b2db      	uxtb	r3, r3
  writeReg(RA8875_HPWR,
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	2118      	movs	r1, #24
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f001 f9e4 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>

  /* Vertical settings registers */
  writeReg(RA8875_VDHR0, (uint16_t)(_height - 1 + _voffset) & 0xFF);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8000caa:	4413      	add	r3, r2
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2119      	movs	r1, #25
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f001 f9d4 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_VDHR1, (uint16_t)(_height - 1 + _voffset) >> 8);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	4413      	add	r3, r2
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	0a1b      	lsrs	r3, r3, #8
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	211a      	movs	r1, #26
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f001 f9c1 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_VNDR0, vsync_nondisp - 1); // V non-display period = VNDR + 1
 8000ce2:	8a3b      	ldrh	r3, [r7, #16]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	211b      	movs	r1, #27
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f001 f9b8 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_VNDR1, vsync_nondisp >> 8);
 8000cf4:	8a3b      	ldrh	r3, [r7, #16]
 8000cf6:	0a1b      	lsrs	r3, r3, #8
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	211c      	movs	r1, #28
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f001 f9af 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_VSTR0, vsync_start - 1); // Vsync start position = VSTR + 1
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	211d      	movs	r1, #29
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f001 f9a6 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_VSTR1, vsync_start >> 8);
 8000d18:	89fb      	ldrh	r3, [r7, #14]
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	211e      	movs	r1, #30
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f001 f99d 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_VPWR,
 8000d2a:	7cbb      	ldrb	r3, [r7, #18]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	211f      	movs	r1, #31
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f001 f995 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
           RA8875_VPWR_LOW + vsync_pw - 1); // Vsync pulse width = VPWR + 1

  /* Set active window X */
  writeReg(RA8875_HSAW0, 0); // horizontal start point
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2130      	movs	r1, #48	; 0x30
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f001 f990 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_HSAW1, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2131      	movs	r1, #49	; 0x31
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f001 f98b 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_HEAW0, (uint16_t)(_width - 1) & 0xFF); // horizontal end point
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	3b01      	subs	r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	2134      	movs	r1, #52	; 0x34
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f001 f980 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_HEAW1, (uint16_t)(_width - 1) >> 8);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	2135      	movs	r1, #53	; 0x35
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f001 f973 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>

  /* Set active window Y */
  writeReg(RA8875_VSAW0, 0 + _voffset); // vertical start point
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8000d84:	461a      	mov	r2, r3
 8000d86:	2132      	movs	r1, #50	; 0x32
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f001 f96b 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_VSAW1, 0 + _voffset);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8000d94:	461a      	mov	r2, r3
 8000d96:	2133      	movs	r1, #51	; 0x33
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f001 f963 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_VEAW0,
           (uint16_t)(_height - 1 + _voffset) & 0xFF); // vertical end point
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8000dac:	4413      	add	r3, r2
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	3b01      	subs	r3, #1
 8000db2:	b2db      	uxtb	r3, r3
  writeReg(RA8875_VEAW0,
 8000db4:	461a      	mov	r2, r3
 8000db6:	2136      	movs	r1, #54	; 0x36
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f001 f953 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_VEAW1, (uint16_t)(_height - 1 + _voffset) >> 8);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4413      	add	r3, r2
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	2137      	movs	r1, #55	; 0x37
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f001 f940 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>

  /* ToDo: Setup touch panel? */

  /* Clear the entire window */
  writeReg(RA8875_MCLR, RA8875_MCLR_START | RA8875_MCLR_FULL);
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	218e      	movs	r1, #142	; 0x8e
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f001 f93b 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  HAL_Delay(500);
 8000dee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df2:	f001 fd63 	bl	80028bc <HAL_Delay>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_ZN15Adafruit_RA88759textWriteEPKct>:

      @param buffer    The buffer containing the characters to render
      @param len       The size of the buffer in bytes
*/
/**************************************************************************/
void Adafruit_RA8875::textWrite(const char *buffer, uint16_t len) {
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	80fb      	strh	r3, [r7, #6]
  if (len == 0)
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d104      	bne.n	8000e1c <_ZN15Adafruit_RA88759textWriteEPKct+0x1e>
    len = strlen(buffer);
 8000e12:	68b8      	ldr	r0, [r7, #8]
 8000e14:	f7ff f9d8 	bl	80001c8 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	80fb      	strh	r3, [r7, #6]
  writeCommand(RA8875_MRWC);
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f001 f9a3 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  for (uint16_t i = 0; i < len; i++) {
 8000e24:	2300      	movs	r3, #0
 8000e26:	82fb      	strh	r3, [r7, #22]
 8000e28:	e012      	b.n	8000e50 <_ZN15Adafruit_RA88759textWriteEPKct+0x52>
    writeData(buffer[i]);
 8000e2a:	8afb      	ldrh	r3, [r7, #22]
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	4413      	add	r3, r2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4619      	mov	r1, r3
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f001 f93e 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
/// @cond DISABLE
#if defined(__arm__)
    /// @endcond
    // This delay is needed with textEnlarge(1) because
    // Teensy 3.X is much faster than Arduino Uno
    if (_textScale > 0)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <_ZN15Adafruit_RA88759textWriteEPKct+0x4c>
      HAL_Delay(1);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f001 fd39 	bl	80028bc <HAL_Delay>
  for (uint16_t i = 0; i < len; i++) {
 8000e4a:	8afb      	ldrh	r3, [r7, #22]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	82fb      	strh	r3, [r7, #22]
 8000e50:	8afa      	ldrh	r2, [r7, #22]
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d3e8      	bcc.n	8000e2a <_ZN15Adafruit_RA88759textWriteEPKct+0x2c>
      HAL_Delay(1);
/// @cond DISABLE
#endif
    /// @endcond
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_ZN15Adafruit_RA88758waitPollEhh>:
      @param waitflag The value to wait for the status register to match

      @return True if the expected status has been reached
*/
/**************************************************************************/
bool Adafruit_RA8875::waitPoll(uint8_t regname, uint8_t waitflag) {
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	70fb      	strb	r3, [r7, #3]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	70bb      	strb	r3, [r7, #2]
  /* Wait for the command to finish */
  while (1) {
    uint8_t temp = readReg(regname);
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f001 f90a 	bl	8002090 <_ZN15Adafruit_RA88757readRegEh>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	73fb      	strb	r3, [r7, #15]
    if (!(temp & waitflag))
 8000e80:	7bfa      	ldrb	r2, [r7, #15]
 8000e82:	78bb      	ldrb	r3, [r7, #2]
 8000e84:	4013      	ands	r3, r2
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f2      	bne.n	8000e72 <_ZN15Adafruit_RA88758waitPollEhh+0x10>
      return true;
 8000e8c:	2301      	movs	r3, #1
  }
  return false; // MEMEFIX: yeah i know, unreached! - add timeout?
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_ZN15Adafruit_RA887514applyRotationXEs>:
    Apply current rotation in the X direction

    @return the X value with current rotation applied
 */
/**************************************************************************/
int16_t Adafruit_RA8875::applyRotationX(int16_t x) {
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
  switch (_rotation) {
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d109      	bne.n	8000ec0 <_ZN15Adafruit_RA887514applyRotationXEs+0x2a>
  case 2:
    x = _width - 1 - x;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	807b      	strh	r3, [r7, #2]
    break;
 8000ebe:	bf00      	nop
  }

  return x;
 8000ec0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>:
    Apply current rotation in the Y direction

    @return the Y value with current rotation applied
 */
/**************************************************************************/
int16_t Adafruit_RA8875::applyRotationY(int16_t y) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
  switch (_rotation) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d109      	bne.n	8000efa <_ZN15Adafruit_RA887514applyRotationYEs+0x2a>
  case 2:
    y = _height - 1 - y;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	807b      	strh	r3, [r7, #2]
    break;
 8000ef8:	bf00      	nop
  }

  return y + _voffset;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	4413      	add	r3, r2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b21b      	sxth	r3, r3
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_ZN15Adafruit_RA88759drawPixelEsst>:
      @param x     The 0-based x location
      @param y     The 0-base y location
      @param color The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4611      	mov	r1, r2
 8000f22:	461a      	mov	r2, r3
 8000f24:	4603      	mov	r3, r0
 8000f26:	817b      	strh	r3, [r7, #10]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	813b      	strh	r3, [r7, #8]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	80fb      	strh	r3, [r7, #6]
  x = applyRotationX(x);
 8000f30:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f34:	4619      	mov	r1, r3
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f7ff ffad 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	817b      	strh	r3, [r7, #10]
  y = applyRotationY(y);
 8000f40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f44:	4619      	mov	r1, r3
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f7ff ffc2 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	813b      	strh	r3, [r7, #8]

  writeReg(RA8875_CURH0, x);
 8000f50:	897b      	ldrh	r3, [r7, #10]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	2146      	movs	r1, #70	; 0x46
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f001 f883 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_CURH1, x >> 8);
 8000f5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f62:	121b      	asrs	r3, r3, #8
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2147      	movs	r1, #71	; 0x47
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f001 f879 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_CURV0, y);
 8000f72:	893b      	ldrh	r3, [r7, #8]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	2148      	movs	r1, #72	; 0x48
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f001 f872 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeReg(RA8875_CURV1, y >> 8);
 8000f80:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f84:	121b      	asrs	r3, r3, #8
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2149      	movs	r1, #73	; 0x49
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f001 f868 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  writeCommand(RA8875_MRWC);
 8000f94:	2102      	movs	r1, #2
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f001 f8e7 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>

  _cs.write(GPIO_PIN_RESET);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3310      	adds	r3, #16
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 f9f4 	bl	8002390 <_ZN4GPIO5writeE13GPIO_PinState>
  _spi.transfer(RA8875_DATAWRITE);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3320      	adds	r3, #32
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fb80 	bl	80026b4 <_ZN3SPI8transferEh>
  _spi.transfer(color >> 8);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f103 0220 	add.w	r2, r3, #32
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	f001 fb75 	bl	80026b4 <_ZN3SPI8transferEh>
  _spi.transfer(color);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3320      	adds	r3, #32
 8000fce:	88fa      	ldrh	r2, [r7, #6]
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fb6d 	bl	80026b4 <_ZN3SPI8transferEh>
  _cs.write(GPIO_PIN_SET);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3310      	adds	r3, #16
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f9d5 	bl	8002390 <_ZN4GPIO5writeE13GPIO_PinState>
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_ZN15Adafruit_RA88758drawLineEsssst>:
      @param y1    The 0-base ending y location
      @param color The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                               uint16_t color) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	817b      	strh	r3, [r7, #10]
 8001000:	460b      	mov	r3, r1
 8001002:	813b      	strh	r3, [r7, #8]
 8001004:	4613      	mov	r3, r2
 8001006:	80fb      	strh	r3, [r7, #6]
  x0 = applyRotationX(x0);
 8001008:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800100c:	4619      	mov	r1, r3
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff ff41 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 8001014:	4603      	mov	r3, r0
 8001016:	817b      	strh	r3, [r7, #10]
  y0 = applyRotationY(y0);
 8001018:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800101c:	4619      	mov	r1, r3
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f7ff ff56 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 8001024:	4603      	mov	r3, r0
 8001026:	813b      	strh	r3, [r7, #8]
  x1 = applyRotationX(x1);
 8001028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102c:	4619      	mov	r1, r3
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f7ff ff31 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 8001034:	4603      	mov	r3, r0
 8001036:	80fb      	strh	r3, [r7, #6]
  y1 = applyRotationY(y1);
 8001038:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800103c:	4619      	mov	r1, r3
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f7ff ff46 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 8001044:	4603      	mov	r3, r0
 8001046:	833b      	strh	r3, [r7, #24]

  /* Set X */
  writeCommand(0x91);
 8001048:	2191      	movs	r1, #145	; 0x91
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f001 f88d 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x0);
 8001050:	897b      	ldrh	r3, [r7, #10]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4619      	mov	r1, r3
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f001 f82d 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x92);
 800105c:	2192      	movs	r1, #146	; 0x92
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f001 f883 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x0 >> 8);
 8001064:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001068:	121b      	asrs	r3, r3, #8
 800106a:	b21b      	sxth	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f001 f820 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Y */
  writeCommand(0x93);
 8001076:	2193      	movs	r1, #147	; 0x93
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f001 f876 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y0);
 800107e:	893b      	ldrh	r3, [r7, #8]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4619      	mov	r1, r3
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f001 f816 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x94);
 800108a:	2194      	movs	r1, #148	; 0x94
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f001 f86c 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y0 >> 8);
 8001092:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001096:	121b      	asrs	r3, r3, #8
 8001098:	b21b      	sxth	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	4619      	mov	r1, r3
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f001 f809 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set X1 */
  writeCommand(0x95);
 80010a4:	2195      	movs	r1, #149	; 0x95
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f001 f85f 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x1);
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4619      	mov	r1, r3
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 ffff 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x96);
 80010b8:	2196      	movs	r1, #150	; 0x96
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f001 f855 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((x1) >> 8);
 80010c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c4:	121b      	asrs	r3, r3, #8
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4619      	mov	r1, r3
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 fff2 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Y1 */
  writeCommand(0x97);
 80010d2:	2197      	movs	r1, #151	; 0x97
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f001 f848 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y1);
 80010da:	8b3b      	ldrh	r3, [r7, #24]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f000 ffe8 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x98);
 80010e6:	2198      	movs	r1, #152	; 0x98
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f001 f83e 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((y1) >> 8);
 80010ee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010f2:	121b      	asrs	r3, r3, #8
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 ffdb 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Color */
  writeCommand(0x63);
 8001100:	2163      	movs	r1, #99	; 0x63
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f001 f831 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0xf800) >> 11);
 8001108:	8bbb      	ldrh	r3, [r7, #28]
 800110a:	0adb      	lsrs	r3, r3, #11
 800110c:	b29b      	uxth	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4619      	mov	r1, r3
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 ffcf 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x64);
 8001118:	2164      	movs	r1, #100	; 0x64
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f001 f825 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x07e0) >> 5);
 8001120:	8bbb      	ldrh	r3, [r7, #28]
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	b29b      	uxth	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f000 ffc0 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x65);
 8001136:	2165      	movs	r1, #101	; 0x65
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f001 f816 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x001f));
 800113e:	8bbb      	ldrh	r3, [r7, #28]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4619      	mov	r1, r3
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 ffb3 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Draw! */
  writeCommand(RA8875_DCR);
 8001150:	2190      	movs	r1, #144	; 0x90
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f001 f809 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(0x80);
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f000 ffab 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Wait for the command to finish */
  waitPoll(RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	2190      	movs	r1, #144	; 0x90
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff fe7c 	bl	8000e62 <_ZN15Adafruit_RA88758waitPollEhh>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZN15Adafruit_RA88758drawRectEsssst>:
      @param h     The rectangle height
      @param color The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                               uint16_t color) {
 8001172:	b590      	push	{r4, r7, lr}
 8001174:	b089      	sub	sp, #36	; 0x24
 8001176:	af04      	add	r7, sp, #16
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	4608      	mov	r0, r1
 800117c:	4611      	mov	r1, r2
 800117e:	461a      	mov	r2, r3
 8001180:	4603      	mov	r3, r0
 8001182:	817b      	strh	r3, [r7, #10]
 8001184:	460b      	mov	r3, r1
 8001186:	813b      	strh	r3, [r7, #8]
 8001188:	4613      	mov	r3, r2
 800118a:	80fb      	strh	r3, [r7, #6]
  rectHelper(x, y, x + w - 1, y + h - 1, color, false);
 800118c:	897a      	ldrh	r2, [r7, #10]
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	4413      	add	r3, r2
 8001192:	b29b      	uxth	r3, r3
 8001194:	3b01      	subs	r3, #1
 8001196:	b29b      	uxth	r3, r3
 8001198:	b21c      	sxth	r4, r3
 800119a:	893a      	ldrh	r2, [r7, #8]
 800119c:	8c3b      	ldrh	r3, [r7, #32]
 800119e:	4413      	add	r3, r2
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80011ac:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80011b0:	2200      	movs	r2, #0
 80011b2:	9202      	str	r2, [sp, #8]
 80011b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011b6:	9201      	str	r2, [sp, #4]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	4623      	mov	r3, r4
 80011bc:	4602      	mov	r2, r0
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 fa2e 	bl	8001620 <_ZN15Adafruit_RA887510rectHelperEsssstb>
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd90      	pop	{r4, r7, pc}

080011cc <_ZN15Adafruit_RA88758fillRectEsssst>:
      @param h     The rectangle height
      @param color The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                               uint16_t color) {
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	4608      	mov	r0, r1
 80011d6:	4611      	mov	r1, r2
 80011d8:	461a      	mov	r2, r3
 80011da:	4603      	mov	r3, r0
 80011dc:	817b      	strh	r3, [r7, #10]
 80011de:	460b      	mov	r3, r1
 80011e0:	813b      	strh	r3, [r7, #8]
 80011e2:	4613      	mov	r3, r2
 80011e4:	80fb      	strh	r3, [r7, #6]
  rectHelper(x, y, x + w - 1, y + h - 1, color, true);
 80011e6:	897a      	ldrh	r2, [r7, #10]
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	4413      	add	r3, r2
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	b21c      	sxth	r4, r3
 80011f4:	893a      	ldrh	r2, [r7, #8]
 80011f6:	8c3b      	ldrh	r3, [r7, #32]
 80011f8:	4413      	add	r3, r2
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	3b01      	subs	r3, #1
 80011fe:	b29b      	uxth	r3, r3
 8001200:	b21b      	sxth	r3, r3
 8001202:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001206:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800120a:	2201      	movs	r2, #1
 800120c:	9202      	str	r2, [sp, #8]
 800120e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001210:	9201      	str	r2, [sp, #4]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4623      	mov	r3, r4
 8001216:	4602      	mov	r2, r0
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 fa01 	bl	8001620 <_ZN15Adafruit_RA887510rectHelperEsssstb>
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}

08001226 <_ZN15Adafruit_RA887510fillScreenEt>:
      Fills the screen with the spefied RGB565 color

      @param color The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::fillScreen(uint16_t color) {
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af04      	add	r7, sp, #16
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]
  rectHelper(0, 0, _width - 1, _height - 1, color, true);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001238:	3b01      	subs	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	b219      	sxth	r1, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8001244:	3b01      	subs	r3, #1
 8001246:	b29b      	uxth	r3, r3
 8001248:	b21b      	sxth	r3, r3
 800124a:	2201      	movs	r2, #1
 800124c:	9202      	str	r2, [sp, #8]
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	9201      	str	r2, [sp, #4]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	460b      	mov	r3, r1
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f9e0 	bl	8001620 <_ZN15Adafruit_RA887510rectHelperEsssstb>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_ZN15Adafruit_RA887510drawCircleEssst>:
      @param r     The circle's radius
      @param color The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::drawCircle(int16_t x, int16_t y, int16_t r,
                                 uint16_t color) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af02      	add	r7, sp, #8
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	4608      	mov	r0, r1
 8001272:	4611      	mov	r1, r2
 8001274:	461a      	mov	r2, r3
 8001276:	4603      	mov	r3, r0
 8001278:	817b      	strh	r3, [r7, #10]
 800127a:	460b      	mov	r3, r1
 800127c:	813b      	strh	r3, [r7, #8]
 800127e:	4613      	mov	r3, r2
 8001280:	80fb      	strh	r3, [r7, #6]
  circleHelper(x, y, r, color, false);
 8001282:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001286:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800128a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800128e:	2300      	movs	r3, #0
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	8b3b      	ldrh	r3, [r7, #24]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4603      	mov	r3, r0
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 f92b 	bl	80014f4 <_ZN15Adafruit_RA887512circleHelperEssstb>
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_ZN15Adafruit_RA887510fillCircleEssst>:
      @param r     The circle's radius
      @param color The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::fillCircle(int16_t x, int16_t y, int16_t r,
                                 uint16_t color) {
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af02      	add	r7, sp, #8
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	4608      	mov	r0, r1
 80012b0:	4611      	mov	r1, r2
 80012b2:	461a      	mov	r2, r3
 80012b4:	4603      	mov	r3, r0
 80012b6:	817b      	strh	r3, [r7, #10]
 80012b8:	460b      	mov	r3, r1
 80012ba:	813b      	strh	r3, [r7, #8]
 80012bc:	4613      	mov	r3, r2
 80012be:	80fb      	strh	r3, [r7, #6]
  circleHelper(x, y, r, color, true);
 80012c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80012c8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80012cc:	2301      	movs	r3, #1
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	8b3b      	ldrh	r3, [r7, #24]
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4603      	mov	r3, r0
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 f90c 	bl	80014f4 <_ZN15Adafruit_RA887512circleHelperEssstb>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_ZN15Adafruit_RA887512drawTriangleEsssssst>:
      @param color The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::drawTriangle(int16_t x0, int16_t y0, int16_t x1,
                                   int16_t y1, int16_t x2, int16_t y2,
                                   uint16_t color) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af06      	add	r7, sp, #24
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	4608      	mov	r0, r1
 80012ee:	4611      	mov	r1, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	4603      	mov	r3, r0
 80012f4:	817b      	strh	r3, [r7, #10]
 80012f6:	460b      	mov	r3, r1
 80012f8:	813b      	strh	r3, [r7, #8]
 80012fa:	4613      	mov	r3, r2
 80012fc:	80fb      	strh	r3, [r7, #6]
  triangleHelper(x0, y0, x1, y1, x2, y2, color, false);
 80012fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001302:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001306:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800130a:	2300      	movs	r3, #0
 800130c:	9304      	str	r3, [sp, #16]
 800130e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001310:	9303      	str	r3, [sp, #12]
 8001312:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	4603      	mov	r3, r0
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 fa45 	bl	80017b6 <_ZN15Adafruit_RA887514triangleHelperEsssssstb>
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_ZN15Adafruit_RA887512fillTriangleEsssssst>:
      @param color The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::fillTriangle(int16_t x0, int16_t y0, int16_t x1,
                                   int16_t y1, int16_t x2, int16_t y2,
                                   uint16_t color) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af06      	add	r7, sp, #24
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	4608      	mov	r0, r1
 800133e:	4611      	mov	r1, r2
 8001340:	461a      	mov	r2, r3
 8001342:	4603      	mov	r3, r0
 8001344:	817b      	strh	r3, [r7, #10]
 8001346:	460b      	mov	r3, r1
 8001348:	813b      	strh	r3, [r7, #8]
 800134a:	4613      	mov	r3, r2
 800134c:	80fb      	strh	r3, [r7, #6]
  triangleHelper(x0, y0, x1, y1, x2, y2, color, true);
 800134e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001352:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001356:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800135a:	2301      	movs	r3, #1
 800135c:	9304      	str	r3, [sp, #16]
 800135e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001360:	9303      	str	r3, [sp, #12]
 8001362:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4603      	mov	r3, r0
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 fa1d 	bl	80017b6 <_ZN15Adafruit_RA887514triangleHelperEsssssstb>
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_ZN15Adafruit_RA887511drawEllipseEsssst>:
      @param color     The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::drawEllipse(int16_t xCenter, int16_t yCenter,
                                  int16_t longAxis, int16_t shortAxis,
                                  uint16_t color) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af04      	add	r7, sp, #16
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	4608      	mov	r0, r1
 800138e:	4611      	mov	r1, r2
 8001390:	461a      	mov	r2, r3
 8001392:	4603      	mov	r3, r0
 8001394:	817b      	strh	r3, [r7, #10]
 8001396:	460b      	mov	r3, r1
 8001398:	813b      	strh	r3, [r7, #8]
 800139a:	4613      	mov	r3, r2
 800139c:	80fb      	strh	r3, [r7, #6]
  ellipseHelper(xCenter, yCenter, longAxis, shortAxis, color, false);
 800139e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80013a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013a6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80013aa:	2300      	movs	r3, #0
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	8bbb      	ldrh	r3, [r7, #28]
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	4603      	mov	r3, r0
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 fb04 	bl	80019c8 <_ZN15Adafruit_RA887513ellipseHelperEsssstb>
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_ZN15Adafruit_RA887511fillEllipseEsssst>:
      @param color     The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::fillEllipse(int16_t xCenter, int16_t yCenter,
                                  int16_t longAxis, int16_t shortAxis,
                                  uint16_t color) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af04      	add	r7, sp, #16
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	4608      	mov	r0, r1
 80013d2:	4611      	mov	r1, r2
 80013d4:	461a      	mov	r2, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	817b      	strh	r3, [r7, #10]
 80013da:	460b      	mov	r3, r1
 80013dc:	813b      	strh	r3, [r7, #8]
 80013de:	4613      	mov	r3, r2
 80013e0:	80fb      	strh	r3, [r7, #6]
  ellipseHelper(xCenter, yCenter, longAxis, shortAxis, color, true);
 80013e2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80013e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013ea:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80013ee:	2301      	movs	r3, #1
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	8bbb      	ldrh	r3, [r7, #28]
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	4603      	mov	r3, r0
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 fae2 	bl	80019c8 <_ZN15Adafruit_RA887513ellipseHelperEsssstb>
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <_ZN15Adafruit_RA88759drawCurveEssssht>:
      @param color     The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::drawCurve(int16_t xCenter, int16_t yCenter,
                                int16_t longAxis, int16_t shortAxis,
                                uint8_t curvePart, uint16_t color) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af04      	add	r7, sp, #16
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	4608      	mov	r0, r1
 8001416:	4611      	mov	r1, r2
 8001418:	461a      	mov	r2, r3
 800141a:	4603      	mov	r3, r0
 800141c:	817b      	strh	r3, [r7, #10]
 800141e:	460b      	mov	r3, r1
 8001420:	813b      	strh	r3, [r7, #8]
 8001422:	4613      	mov	r3, r2
 8001424:	80fb      	strh	r3, [r7, #6]
  curveHelper(xCenter, yCenter, longAxis, shortAxis, curvePart, color, false);
 8001426:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800142a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800142e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001432:	2300      	movs	r3, #0
 8001434:	9303      	str	r3, [sp, #12]
 8001436:	8c3b      	ldrh	r3, [r7, #32]
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	7f3b      	ldrb	r3, [r7, #28]
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	4603      	mov	r3, r0
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fb79 	bl	8001b3e <_ZN15Adafruit_RA887511curveHelperEsssshtb>
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_ZN15Adafruit_RA88759fillCurveEssssht>:
      @param color     The RGB565 color to use when drawing the pixel
*/
/**************************************************************************/
void Adafruit_RA8875::fillCurve(int16_t xCenter, int16_t yCenter,
                                int16_t longAxis, int16_t shortAxis,
                                uint8_t curvePart, uint16_t color) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af04      	add	r7, sp, #16
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4603      	mov	r3, r0
 8001464:	817b      	strh	r3, [r7, #10]
 8001466:	460b      	mov	r3, r1
 8001468:	813b      	strh	r3, [r7, #8]
 800146a:	4613      	mov	r3, r2
 800146c:	80fb      	strh	r3, [r7, #6]
  curveHelper(xCenter, yCenter, longAxis, shortAxis, curvePart, color, true);
 800146e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001472:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001476:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800147a:	2301      	movs	r3, #1
 800147c:	9303      	str	r3, [sp, #12]
 800147e:	8c3b      	ldrh	r3, [r7, #32]
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	7f3b      	ldrb	r3, [r7, #28]
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	4603      	mov	r3, r0
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 fb55 	bl	8001b3e <_ZN15Adafruit_RA887511curveHelperEsssshtb>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_ZN15Adafruit_RA887513fillRoundRectEssssst>:
      @param r   The radius of the curves in the corners of the rectangle
      @param color  The RGB565 color to use when drawing the pixel
 */
/**************************************************************************/
void Adafruit_RA8875::fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                    int16_t r, uint16_t color) {
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af04      	add	r7, sp, #16
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	4608      	mov	r0, r1
 80014a6:	4611      	mov	r1, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	817b      	strh	r3, [r7, #10]
 80014ae:	460b      	mov	r3, r1
 80014b0:	813b      	strh	r3, [r7, #8]
 80014b2:	4613      	mov	r3, r2
 80014b4:	80fb      	strh	r3, [r7, #6]
  roundRectHelper(x, y, x + w, y + h, r, color, true);
 80014b6:	897a      	ldrh	r2, [r7, #10]
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	4413      	add	r3, r2
 80014bc:	b29b      	uxth	r3, r3
 80014be:	b21c      	sxth	r4, r3
 80014c0:	893a      	ldrh	r2, [r7, #8]
 80014c2:	8c3b      	ldrh	r3, [r7, #32]
 80014c4:	4413      	add	r3, r2
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80014ce:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80014d2:	2201      	movs	r2, #1
 80014d4:	9203      	str	r2, [sp, #12]
 80014d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014d8:	9202      	str	r2, [sp, #8]
 80014da:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80014de:	9201      	str	r2, [sp, #4]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4623      	mov	r3, r4
 80014e4:	4602      	mov	r2, r0
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 fbfb 	bl	8001ce2 <_ZN15Adafruit_RA887515roundRectHelperEssssstb>
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd90      	pop	{r4, r7, pc}

080014f4 <_ZN15Adafruit_RA887512circleHelperEssstb>:
/*!
      Helper function for higher level circle drawing code
*/
/**************************************************************************/
void Adafruit_RA8875::circleHelper(int16_t x, int16_t y, int16_t r,
                                   uint16_t color, bool filled) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	4608      	mov	r0, r1
 80014fe:	4611      	mov	r1, r2
 8001500:	461a      	mov	r2, r3
 8001502:	4603      	mov	r3, r0
 8001504:	817b      	strh	r3, [r7, #10]
 8001506:	460b      	mov	r3, r1
 8001508:	813b      	strh	r3, [r7, #8]
 800150a:	4613      	mov	r3, r2
 800150c:	80fb      	strh	r3, [r7, #6]
  x = applyRotationX(x);
 800150e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001512:	4619      	mov	r1, r3
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7ff fcbe 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 800151a:	4603      	mov	r3, r0
 800151c:	817b      	strh	r3, [r7, #10]
  y = applyRotationY(y);
 800151e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001522:	4619      	mov	r1, r3
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f7ff fcd3 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 800152a:	4603      	mov	r3, r0
 800152c:	813b      	strh	r3, [r7, #8]

  /* Set X */
  writeCommand(0x99);
 800152e:	2199      	movs	r1, #153	; 0x99
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fe1a 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x);
 8001536:	897b      	ldrh	r3, [r7, #10]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 fdba 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x9a);
 8001542:	219a      	movs	r1, #154	; 0x9a
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 fe10 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x >> 8);
 800154a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800154e:	121b      	asrs	r3, r3, #8
 8001550:	b21b      	sxth	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4619      	mov	r1, r3
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 fdad 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Y */
  writeCommand(0x9b);
 800155c:	219b      	movs	r1, #155	; 0x9b
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 fe03 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y);
 8001564:	893b      	ldrh	r3, [r7, #8]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 fda3 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x9c);
 8001570:	219c      	movs	r1, #156	; 0x9c
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 fdf9 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y >> 8);
 8001578:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800157c:	121b      	asrs	r3, r3, #8
 800157e:	b21b      	sxth	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4619      	mov	r1, r3
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 fd96 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Radius */
  writeCommand(0x9d);
 800158a:	219d      	movs	r1, #157	; 0x9d
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 fdec 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(r);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4619      	mov	r1, r3
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 fd8c 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Color */
  writeCommand(0x63);
 800159e:	2163      	movs	r1, #99	; 0x63
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 fde2 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0xf800) >> 11);
 80015a6:	8b3b      	ldrh	r3, [r7, #24]
 80015a8:	0adb      	lsrs	r3, r3, #11
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 fd80 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x64);
 80015b6:	2164      	movs	r1, #100	; 0x64
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 fdd6 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x07e0) >> 5);
 80015be:	8b3b      	ldrh	r3, [r7, #24]
 80015c0:	095b      	lsrs	r3, r3, #5
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 fd71 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x65);
 80015d4:	2165      	movs	r1, #101	; 0x65
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fdc7 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x001f));
 80015dc:	8b3b      	ldrh	r3, [r7, #24]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 fd64 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Draw! */
  writeCommand(RA8875_DCR);
 80015ee:	2190      	movs	r1, #144	; 0x90
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 fdba 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  if (filled) {
 80015f6:	7f3b      	ldrb	r3, [r7, #28]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d004      	beq.n	8001606 <_ZN15Adafruit_RA887512circleHelperEssstb+0x112>
    writeData(RA8875_DCR_CIRCLE_START | RA8875_DCR_FILL);
 80015fc:	2160      	movs	r1, #96	; 0x60
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 fd59 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
 8001604:	e003      	b.n	800160e <_ZN15Adafruit_RA887512circleHelperEssstb+0x11a>
  } else {
    writeData(RA8875_DCR_CIRCLE_START | RA8875_DCR_NOFILL);
 8001606:	2140      	movs	r1, #64	; 0x40
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 fd54 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  }

  /* Wait for the command to finish */
  waitPoll(RA8875_DCR, RA8875_DCR_CIRCLE_STATUS);
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	2190      	movs	r1, #144	; 0x90
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7ff fc25 	bl	8000e62 <_ZN15Adafruit_RA88758waitPollEhh>
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_ZN15Adafruit_RA887510rectHelperEsssstb>:
/*!
      Helper function for higher level rectangle drawing code
*/
/**************************************************************************/
void Adafruit_RA8875::rectHelper(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color, bool filled) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	4608      	mov	r0, r1
 800162a:	4611      	mov	r1, r2
 800162c:	461a      	mov	r2, r3
 800162e:	4603      	mov	r3, r0
 8001630:	817b      	strh	r3, [r7, #10]
 8001632:	460b      	mov	r3, r1
 8001634:	813b      	strh	r3, [r7, #8]
 8001636:	4613      	mov	r3, r2
 8001638:	80fb      	strh	r3, [r7, #6]
  x = applyRotationX(x);
 800163a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800163e:	4619      	mov	r1, r3
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fc28 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 8001646:	4603      	mov	r3, r0
 8001648:	817b      	strh	r3, [r7, #10]
  y = applyRotationY(y);
 800164a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800164e:	4619      	mov	r1, r3
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff fc3d 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 8001656:	4603      	mov	r3, r0
 8001658:	813b      	strh	r3, [r7, #8]
  w = applyRotationX(w);
 800165a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165e:	4619      	mov	r1, r3
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7ff fc18 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
  h = applyRotationY(h);
 800166a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800166e:	4619      	mov	r1, r3
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7ff fc2d 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 8001676:	4603      	mov	r3, r0
 8001678:	833b      	strh	r3, [r7, #24]

  /* Set X */
  writeCommand(0x91);
 800167a:	2191      	movs	r1, #145	; 0x91
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 fd74 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x);
 8001682:	897b      	ldrh	r3, [r7, #10]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4619      	mov	r1, r3
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 fd14 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x92);
 800168e:	2192      	movs	r1, #146	; 0x92
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 fd6a 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x >> 8);
 8001696:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800169a:	121b      	asrs	r3, r3, #8
 800169c:	b21b      	sxth	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 fd07 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Y */
  writeCommand(0x93);
 80016a8:	2193      	movs	r1, #147	; 0x93
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 fd5d 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y);
 80016b0:	893b      	ldrh	r3, [r7, #8]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4619      	mov	r1, r3
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fcfd 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x94);
 80016bc:	2194      	movs	r1, #148	; 0x94
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 fd53 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y >> 8);
 80016c4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80016c8:	121b      	asrs	r3, r3, #8
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4619      	mov	r1, r3
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fcf0 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set X1 */
  writeCommand(0x95);
 80016d6:	2195      	movs	r1, #149	; 0x95
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 fd46 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(w);
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	4619      	mov	r1, r3
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 fce6 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x96);
 80016ea:	2196      	movs	r1, #150	; 0x96
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 fd3c 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((w) >> 8);
 80016f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f6:	121b      	asrs	r3, r3, #8
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4619      	mov	r1, r3
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 fcd9 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Y1 */
  writeCommand(0x97);
 8001704:	2197      	movs	r1, #151	; 0x97
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 fd2f 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(h);
 800170c:	8b3b      	ldrh	r3, [r7, #24]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4619      	mov	r1, r3
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 fccf 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x98);
 8001718:	2198      	movs	r1, #152	; 0x98
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 fd25 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((h) >> 8);
 8001720:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001724:	121b      	asrs	r3, r3, #8
 8001726:	b21b      	sxth	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4619      	mov	r1, r3
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 fcc2 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Color */
  writeCommand(0x63);
 8001732:	2163      	movs	r1, #99	; 0x63
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fd18 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0xf800) >> 11);
 800173a:	8bbb      	ldrh	r3, [r7, #28]
 800173c:	0adb      	lsrs	r3, r3, #11
 800173e:	b29b      	uxth	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4619      	mov	r1, r3
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 fcb6 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x64);
 800174a:	2164      	movs	r1, #100	; 0x64
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 fd0c 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x07e0) >> 5);
 8001752:	8bbb      	ldrh	r3, [r7, #28]
 8001754:	095b      	lsrs	r3, r3, #5
 8001756:	b29b      	uxth	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4619      	mov	r1, r3
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 fca7 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x65);
 8001768:	2165      	movs	r1, #101	; 0x65
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 fcfd 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x001f));
 8001770:	8bbb      	ldrh	r3, [r7, #28]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4619      	mov	r1, r3
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 fc9a 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Draw! */
  writeCommand(RA8875_DCR);
 8001782:	2190      	movs	r1, #144	; 0x90
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 fcf0 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  if (filled) {
 800178a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <_ZN15Adafruit_RA887510rectHelperEsssstb+0x17c>
    writeData(0xB0);
 8001792:	21b0      	movs	r1, #176	; 0xb0
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 fc8e 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
 800179a:	e003      	b.n	80017a4 <_ZN15Adafruit_RA887510rectHelperEsssstb+0x184>
  } else {
    writeData(0x90);
 800179c:	2190      	movs	r1, #144	; 0x90
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 fc89 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  }

  /* Wait for the command to finish */
  waitPoll(RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	2190      	movs	r1, #144	; 0x90
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f7ff fb5a 	bl	8000e62 <_ZN15Adafruit_RA88758waitPollEhh>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_ZN15Adafruit_RA887514triangleHelperEsssssstb>:
      Helper function for higher level triangle drawing code
*/
/**************************************************************************/
void Adafruit_RA8875::triangleHelper(int16_t x0, int16_t y0, int16_t x1,
                                     int16_t y1, int16_t x2, int16_t y2,
                                     uint16_t color, bool filled) {
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	4608      	mov	r0, r1
 80017c0:	4611      	mov	r1, r2
 80017c2:	461a      	mov	r2, r3
 80017c4:	4603      	mov	r3, r0
 80017c6:	817b      	strh	r3, [r7, #10]
 80017c8:	460b      	mov	r3, r1
 80017ca:	813b      	strh	r3, [r7, #8]
 80017cc:	4613      	mov	r3, r2
 80017ce:	80fb      	strh	r3, [r7, #6]
  x0 = applyRotationX(x0);
 80017d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017d4:	4619      	mov	r1, r3
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f7ff fb5d 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 80017dc:	4603      	mov	r3, r0
 80017de:	817b      	strh	r3, [r7, #10]
  y0 = applyRotationY(y0);
 80017e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017e4:	4619      	mov	r1, r3
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f7ff fb72 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 80017ec:	4603      	mov	r3, r0
 80017ee:	813b      	strh	r3, [r7, #8]
  x1 = applyRotationX(x1);
 80017f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f4:	4619      	mov	r1, r3
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff fb4d 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 80017fc:	4603      	mov	r3, r0
 80017fe:	80fb      	strh	r3, [r7, #6]
  y1 = applyRotationY(y1);
 8001800:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001804:	4619      	mov	r1, r3
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f7ff fb62 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 800180c:	4603      	mov	r3, r0
 800180e:	833b      	strh	r3, [r7, #24]
  x2 = applyRotationX(x2);
 8001810:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001814:	4619      	mov	r1, r3
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff fb3d 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 800181c:	4603      	mov	r3, r0
 800181e:	83bb      	strh	r3, [r7, #28]
  y2 = applyRotationY(y2);
 8001820:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001824:	4619      	mov	r1, r3
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f7ff fb52 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 800182c:	4603      	mov	r3, r0
 800182e:	843b      	strh	r3, [r7, #32]

  /* Set Point 0 */
  writeCommand(0x91);
 8001830:	2191      	movs	r1, #145	; 0x91
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fc99 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x0);
 8001838:	897b      	ldrh	r3, [r7, #10]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4619      	mov	r1, r3
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 fc39 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x92);
 8001844:	2192      	movs	r1, #146	; 0x92
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 fc8f 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x0 >> 8);
 800184c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001850:	121b      	asrs	r3, r3, #8
 8001852:	b21b      	sxth	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	4619      	mov	r1, r3
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 fc2c 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x93);
 800185e:	2193      	movs	r1, #147	; 0x93
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 fc82 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y0);
 8001866:	893b      	ldrh	r3, [r7, #8]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4619      	mov	r1, r3
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 fc22 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x94);
 8001872:	2194      	movs	r1, #148	; 0x94
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 fc78 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y0 >> 8);
 800187a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800187e:	121b      	asrs	r3, r3, #8
 8001880:	b21b      	sxth	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4619      	mov	r1, r3
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 fc15 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Point 1 */
  writeCommand(0x95);
 800188c:	2195      	movs	r1, #149	; 0x95
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fc6b 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x1);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4619      	mov	r1, r3
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 fc0b 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x96);
 80018a0:	2196      	movs	r1, #150	; 0x96
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fc61 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x1 >> 8);
 80018a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ac:	121b      	asrs	r3, r3, #8
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4619      	mov	r1, r3
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 fbfe 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x97);
 80018ba:	2197      	movs	r1, #151	; 0x97
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 fc54 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y1);
 80018c2:	8b3b      	ldrh	r3, [r7, #24]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 fbf4 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x98);
 80018ce:	2198      	movs	r1, #152	; 0x98
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fc4a 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y1 >> 8);
 80018d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80018da:	121b      	asrs	r3, r3, #8
 80018dc:	b21b      	sxth	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4619      	mov	r1, r3
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 fbe7 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Point 2 */
  writeCommand(0xA9);
 80018e8:	21a9      	movs	r1, #169	; 0xa9
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 fc3d 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x2);
 80018f0:	8bbb      	ldrh	r3, [r7, #28]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4619      	mov	r1, r3
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 fbdd 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xAA);
 80018fc:	21aa      	movs	r1, #170	; 0xaa
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 fc33 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x2 >> 8);
 8001904:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001908:	121b      	asrs	r3, r3, #8
 800190a:	b21b      	sxth	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4619      	mov	r1, r3
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 fbd0 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xAB);
 8001916:	21ab      	movs	r1, #171	; 0xab
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 fc26 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y2);
 800191e:	8c3b      	ldrh	r3, [r7, #32]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4619      	mov	r1, r3
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 fbc6 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xAC);
 800192a:	21ac      	movs	r1, #172	; 0xac
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 fc1c 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y2 >> 8);
 8001932:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001936:	121b      	asrs	r3, r3, #8
 8001938:	b21b      	sxth	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	4619      	mov	r1, r3
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fbb9 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Color */
  writeCommand(0x63);
 8001944:	2163      	movs	r1, #99	; 0x63
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 fc0f 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0xf800) >> 11);
 800194c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800194e:	0adb      	lsrs	r3, r3, #11
 8001950:	b29b      	uxth	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	4619      	mov	r1, r3
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fbad 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x64);
 800195c:	2164      	movs	r1, #100	; 0x64
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 fc03 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x07e0) >> 5);
 8001964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	b29b      	uxth	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4619      	mov	r1, r3
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 fb9e 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x65);
 800197a:	2165      	movs	r1, #101	; 0x65
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 fbf4 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x001f));
 8001982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4619      	mov	r1, r3
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 fb91 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Draw! */
  writeCommand(RA8875_DCR);
 8001994:	2190      	movs	r1, #144	; 0x90
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 fbe7 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  if (filled) {
 800199c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <_ZN15Adafruit_RA887514triangleHelperEsssssstb+0x1f8>
    writeData(0xA1);
 80019a4:	21a1      	movs	r1, #161	; 0xa1
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 fb85 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
 80019ac:	e003      	b.n	80019b6 <_ZN15Adafruit_RA887514triangleHelperEsssssstb+0x200>
  } else {
    writeData(0x81);
 80019ae:	2181      	movs	r1, #129	; 0x81
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 fb80 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  }

  /* Wait for the command to finish */
  waitPoll(RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	2190      	movs	r1, #144	; 0x90
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff fa51 	bl	8000e62 <_ZN15Adafruit_RA88758waitPollEhh>
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_ZN15Adafruit_RA887513ellipseHelperEsssstb>:
      Helper function for higher level ellipse drawing code
*/
/**************************************************************************/
void Adafruit_RA8875::ellipseHelper(int16_t xCenter, int16_t yCenter,
                                    int16_t longAxis, int16_t shortAxis,
                                    uint16_t color, bool filled) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4603      	mov	r3, r0
 80019d8:	817b      	strh	r3, [r7, #10]
 80019da:	460b      	mov	r3, r1
 80019dc:	813b      	strh	r3, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	80fb      	strh	r3, [r7, #6]
  xCenter = applyRotationX(xCenter);
 80019e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019e6:	4619      	mov	r1, r3
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff fa54 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 80019ee:	4603      	mov	r3, r0
 80019f0:	817b      	strh	r3, [r7, #10]
  yCenter = applyRotationY(yCenter);
 80019f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019f6:	4619      	mov	r1, r3
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff fa69 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 80019fe:	4603      	mov	r3, r0
 8001a00:	813b      	strh	r3, [r7, #8]

  /* Set Center Point */
  writeCommand(0xA5);
 8001a02:	21a5      	movs	r1, #165	; 0xa5
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 fbb0 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(xCenter);
 8001a0a:	897b      	ldrh	r3, [r7, #10]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 fb50 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA6);
 8001a16:	21a6      	movs	r1, #166	; 0xa6
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 fba6 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(xCenter >> 8);
 8001a1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a22:	121b      	asrs	r3, r3, #8
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4619      	mov	r1, r3
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fb43 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA7);
 8001a30:	21a7      	movs	r1, #167	; 0xa7
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fb99 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(yCenter);
 8001a38:	893b      	ldrh	r3, [r7, #8]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 fb39 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA8);
 8001a44:	21a8      	movs	r1, #168	; 0xa8
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fb8f 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(yCenter >> 8);
 8001a4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a50:	121b      	asrs	r3, r3, #8
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fb2c 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Long and Short Axis */
  writeCommand(0xA1);
 8001a5e:	21a1      	movs	r1, #161	; 0xa1
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 fb82 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(longAxis);
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fb22 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA2);
 8001a72:	21a2      	movs	r1, #162	; 0xa2
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 fb78 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(longAxis >> 8);
 8001a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7e:	121b      	asrs	r3, r3, #8
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4619      	mov	r1, r3
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 fb15 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA3);
 8001a8c:	21a3      	movs	r1, #163	; 0xa3
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 fb6b 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(shortAxis);
 8001a94:	8b3b      	ldrh	r3, [r7, #24]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	4619      	mov	r1, r3
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 fb0b 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA4);
 8001aa0:	21a4      	movs	r1, #164	; 0xa4
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fb61 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(shortAxis >> 8);
 8001aa8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001aac:	121b      	asrs	r3, r3, #8
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 fafe 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Color */
  writeCommand(0x63);
 8001aba:	2163      	movs	r1, #99	; 0x63
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fb54 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0xf800) >> 11);
 8001ac2:	8bbb      	ldrh	r3, [r7, #28]
 8001ac4:	0adb      	lsrs	r3, r3, #11
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 faf2 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x64);
 8001ad2:	2164      	movs	r1, #100	; 0x64
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 fb48 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x07e0) >> 5);
 8001ada:	8bbb      	ldrh	r3, [r7, #28]
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4619      	mov	r1, r3
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fae3 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x65);
 8001af0:	2165      	movs	r1, #101	; 0x65
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 fb39 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x001f));
 8001af8:	8bbb      	ldrh	r3, [r7, #28]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	4619      	mov	r1, r3
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 fad6 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Draw! */
  writeCommand(0xA0);
 8001b0a:	21a0      	movs	r1, #160	; 0xa0
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 fb2c 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  if (filled) {
 8001b12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <_ZN15Adafruit_RA887513ellipseHelperEsssstb+0x15c>
    writeData(0xC0);
 8001b1a:	21c0      	movs	r1, #192	; 0xc0
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 faca 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
 8001b22:	e003      	b.n	8001b2c <_ZN15Adafruit_RA887513ellipseHelperEsssstb+0x164>
  } else {
    writeData(0x80);
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 fac5 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  }

  /* Wait for the command to finish */
  waitPoll(RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	21a0      	movs	r1, #160	; 0xa0
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff f996 	bl	8000e62 <_ZN15Adafruit_RA88758waitPollEhh>
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_ZN15Adafruit_RA887511curveHelperEsssshtb>:
*/
/**************************************************************************/
void Adafruit_RA8875::curveHelper(int16_t xCenter, int16_t yCenter,
                                  int16_t longAxis, int16_t shortAxis,
                                  uint8_t curvePart, uint16_t color,
                                  bool filled) {
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	4608      	mov	r0, r1
 8001b48:	4611      	mov	r1, r2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	817b      	strh	r3, [r7, #10]
 8001b50:	460b      	mov	r3, r1
 8001b52:	813b      	strh	r3, [r7, #8]
 8001b54:	4613      	mov	r3, r2
 8001b56:	80fb      	strh	r3, [r7, #6]
  xCenter = applyRotationX(xCenter);
 8001b58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff f999 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 8001b64:	4603      	mov	r3, r0
 8001b66:	817b      	strh	r3, [r7, #10]
  yCenter = applyRotationY(yCenter);
 8001b68:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7ff f9ae 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 8001b74:	4603      	mov	r3, r0
 8001b76:	813b      	strh	r3, [r7, #8]
  curvePart = (curvePart + _rotation) % 4;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
 8001b7e:	7f3b      	ldrb	r3, [r7, #28]
 8001b80:	4413      	add	r3, r2
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	773b      	strb	r3, [r7, #28]

  /* Set Center Point */
  writeCommand(0xA5);
 8001b8a:	21a5      	movs	r1, #165	; 0xa5
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 faec 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(xCenter);
 8001b92:	897b      	ldrh	r3, [r7, #10]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	4619      	mov	r1, r3
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 fa8c 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA6);
 8001b9e:	21a6      	movs	r1, #166	; 0xa6
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 fae2 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(xCenter >> 8);
 8001ba6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001baa:	121b      	asrs	r3, r3, #8
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fa7f 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA7);
 8001bb8:	21a7      	movs	r1, #167	; 0xa7
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fad5 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(yCenter);
 8001bc0:	893b      	ldrh	r3, [r7, #8]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fa75 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA8);
 8001bcc:	21a8      	movs	r1, #168	; 0xa8
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 facb 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(yCenter >> 8);
 8001bd4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001bd8:	121b      	asrs	r3, r3, #8
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 fa68 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Long and Short Axis */
  writeCommand(0xA1);
 8001be6:	21a1      	movs	r1, #161	; 0xa1
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 fabe 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(longAxis);
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fa5e 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA2);
 8001bfa:	21a2      	movs	r1, #162	; 0xa2
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fab4 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(longAxis >> 8);
 8001c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c06:	121b      	asrs	r3, r3, #8
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fa51 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA3);
 8001c14:	21a3      	movs	r1, #163	; 0xa3
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 faa7 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(shortAxis);
 8001c1c:	8b3b      	ldrh	r3, [r7, #24]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fa47 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA4);
 8001c28:	21a4      	movs	r1, #164	; 0xa4
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 fa9d 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(shortAxis >> 8);
 8001c30:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c34:	121b      	asrs	r3, r3, #8
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 fa3a 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Color */
  writeCommand(0x63);
 8001c42:	2163      	movs	r1, #99	; 0x63
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 fa90 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0xf800) >> 11);
 8001c4a:	8c3b      	ldrh	r3, [r7, #32]
 8001c4c:	0adb      	lsrs	r3, r3, #11
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 fa2e 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x64);
 8001c5a:	2164      	movs	r1, #100	; 0x64
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 fa84 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x07e0) >> 5);
 8001c62:	8c3b      	ldrh	r3, [r7, #32]
 8001c64:	095b      	lsrs	r3, r3, #5
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	4619      	mov	r1, r3
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fa1f 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x65);
 8001c78:	2165      	movs	r1, #101	; 0x65
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fa75 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x001f));
 8001c80:	8c3b      	ldrh	r3, [r7, #32]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 fa12 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Draw! */
  writeCommand(0xA0);
 8001c92:	21a0      	movs	r1, #160	; 0xa0
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fa68 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  if (filled) {
 8001c9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <_ZN15Adafruit_RA887511curveHelperEsssshtb+0x17c>
    writeData(0xD0 | (curvePart & 0x03));
 8001ca2:	7f3b      	ldrb	r3, [r7, #28]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f9ff 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
 8001cb8:	e00a      	b.n	8001cd0 <_ZN15Adafruit_RA887511curveHelperEsssshtb+0x192>
  } else {
    writeData(0x90 | (curvePart & 0x03));
 8001cba:	7f3b      	ldrb	r3, [r7, #28]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4619      	mov	r1, r3
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f9f3 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  }

  /* Wait for the command to finish */
  waitPoll(RA8875_ELLIPSE, RA8875_ELLIPSE_STATUS);
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	21a0      	movs	r1, #160	; 0xa0
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7ff f8c4 	bl	8000e62 <_ZN15Adafruit_RA88758waitPollEhh>
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_ZN15Adafruit_RA887515roundRectHelperEssssstb>:
      Helper function for higher level rounded rectangle drawing code
 */
/**************************************************************************/
void Adafruit_RA8875::roundRectHelper(int16_t x, int16_t y, int16_t w,
                                      int16_t h, int16_t r, uint16_t color,
                                      bool filled) {
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	4608      	mov	r0, r1
 8001cec:	4611      	mov	r1, r2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	817b      	strh	r3, [r7, #10]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	813b      	strh	r3, [r7, #8]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	80fb      	strh	r3, [r7, #6]
  x = applyRotationX(x);
 8001cfc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d00:	4619      	mov	r1, r3
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff f8c7 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	817b      	strh	r3, [r7, #10]
  y = applyRotationY(y);
 8001d0c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d10:	4619      	mov	r1, r3
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f7ff f8dc 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	813b      	strh	r3, [r7, #8]
  w = applyRotationX(w);
 8001d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d20:	4619      	mov	r1, r3
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff f8b7 	bl	8000e96 <_ZN15Adafruit_RA887514applyRotationXEs>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	80fb      	strh	r3, [r7, #6]
  h = applyRotationY(h);
 8001d2c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d30:	4619      	mov	r1, r3
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff f8cc 	bl	8000ed0 <_ZN15Adafruit_RA887514applyRotationYEs>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	833b      	strh	r3, [r7, #24]
  if (x > w)
 8001d3c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	dd06      	ble.n	8001d56 <_ZN15Adafruit_RA887515roundRectHelperEssssstb+0x74>
    swap(x, w);
 8001d48:	1dba      	adds	r2, r7, #6
 8001d4a:	f107 030a 	add.w	r3, r7, #10
 8001d4e:	4619      	mov	r1, r3
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7fe fdf9 	bl	8000948 <_ZN15Adafruit_RA88754swapERsS0_>
  if (y > h)
 8001d56:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d5a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dd07      	ble.n	8001d72 <_ZN15Adafruit_RA887515roundRectHelperEssssstb+0x90>
    swap(y, h);
 8001d62:	f107 0308 	add.w	r3, r7, #8
 8001d66:	f107 0218 	add.w	r2, r7, #24
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f7fe fdeb 	bl	8000948 <_ZN15Adafruit_RA88754swapERsS0_>

  /* Set X */
  writeCommand(0x91);
 8001d72:	2191      	movs	r1, #145	; 0x91
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f9f8 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x);
 8001d7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	4619      	mov	r1, r3
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f997 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x92);
 8001d88:	2192      	movs	r1, #146	; 0x92
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f9ed 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(x >> 8);
 8001d90:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d94:	121b      	asrs	r3, r3, #8
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f98a 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Y */
  writeCommand(0x93);
 8001da2:	2193      	movs	r1, #147	; 0x93
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f9e0 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y);
 8001daa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	4619      	mov	r1, r3
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f97f 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x94);
 8001db8:	2194      	movs	r1, #148	; 0x94
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f9d5 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(y >> 8);
 8001dc0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001dc4:	121b      	asrs	r3, r3, #8
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4619      	mov	r1, r3
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f972 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set X1 */
  writeCommand(0x95);
 8001dd2:	2195      	movs	r1, #149	; 0x95
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f9c8 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(w);
 8001dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	4619      	mov	r1, r3
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f967 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x96);
 8001de8:	2196      	movs	r1, #150	; 0x96
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f9bd 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((w) >> 8);
 8001df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df4:	121b      	asrs	r3, r3, #8
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f95a 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Y1 */
  writeCommand(0x97);
 8001e02:	2197      	movs	r1, #151	; 0x97
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f9b0 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(h);
 8001e0a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	4619      	mov	r1, r3
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f94f 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x98);
 8001e18:	2198      	movs	r1, #152	; 0x98
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f9a5 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((h) >> 8);
 8001e20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e24:	121b      	asrs	r3, r3, #8
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f942 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  writeCommand(0xA1);
 8001e32:	21a1      	movs	r1, #161	; 0xa1
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f998 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(r);
 8001e3a:	8bbb      	ldrh	r3, [r7, #28]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4619      	mov	r1, r3
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f938 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA2);
 8001e46:	21a2      	movs	r1, #162	; 0xa2
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f98e 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((r) >> 8);
 8001e4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e52:	121b      	asrs	r3, r3, #8
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	4619      	mov	r1, r3
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f92b 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  writeCommand(0xA3);
 8001e60:	21a3      	movs	r1, #163	; 0xa3
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f981 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(r);
 8001e68:	8bbb      	ldrh	r3, [r7, #28]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f921 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0xA4);
 8001e74:	21a4      	movs	r1, #164	; 0xa4
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f977 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((r) >> 8);
 8001e7c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e80:	121b      	asrs	r3, r3, #8
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f914 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Set Color */
  writeCommand(0x63);
 8001e8e:	2163      	movs	r1, #99	; 0x63
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 f96a 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0xf800) >> 11);
 8001e96:	8c3b      	ldrh	r3, [r7, #32]
 8001e98:	0adb      	lsrs	r3, r3, #11
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f908 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x64);
 8001ea6:	2164      	movs	r1, #100	; 0x64
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f95e 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x07e0) >> 5);
 8001eae:	8c3b      	ldrh	r3, [r7, #32]
 8001eb0:	095b      	lsrs	r3, r3, #5
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f8f9 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  writeCommand(0x65);
 8001ec4:	2165      	movs	r1, #101	; 0x65
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f94f 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData((color & 0x001f));
 8001ecc:	8c3b      	ldrh	r3, [r7, #32]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f8ec 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>

  /* Draw! */
  writeCommand(RA8875_ELLIPSE);
 8001ede:	21a0      	movs	r1, #160	; 0xa0
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f942 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  if (filled) {
 8001ee6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d004      	beq.n	8001ef8 <_ZN15Adafruit_RA887515roundRectHelperEssssstb+0x216>
    writeData(0xE0);
 8001eee:	21e0      	movs	r1, #224	; 0xe0
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f8e0 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
 8001ef6:	e003      	b.n	8001f00 <_ZN15Adafruit_RA887515roundRectHelperEssssstb+0x21e>
  } else {
    writeData(0xA0);
 8001ef8:	21a0      	movs	r1, #160	; 0xa0
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f8db 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
  }

  /* Wait for the command to finish */
  waitPoll(RA8875_ELLIPSE, RA8875_DCR_LINESQUTRI_STATUS);
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	21a0      	movs	r1, #160	; 0xa0
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7fe ffac 	bl	8000e62 <_ZN15Adafruit_RA88758waitPollEhh>
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_ZN15Adafruit_RA88755GPIOXEb>:

    @param on Whether to turn Extra General Purpose IO on or not

 */
/**************************************************************************/
void Adafruit_RA8875::GPIOX(bool on) {
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
  if (on)
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <_ZN15Adafruit_RA88755GPIOXEb+0x1e>
    writeReg(RA8875_GPIOX, 1);
 8001f24:	2201      	movs	r2, #1
 8001f26:	21c7      	movs	r1, #199	; 0xc7
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f89b 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  else
    writeReg(RA8875_GPIOX, 0);
}
 8001f2e:	e004      	b.n	8001f3a <_ZN15Adafruit_RA88755GPIOXEb+0x28>
    writeReg(RA8875_GPIOX, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	21c7      	movs	r1, #199	; 0xc7
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f895 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_ZN15Adafruit_RA88757PWM1outEh>:
    Set the duty cycle of the PWM 1 Clock

    @param p The duty Cycle (0-255)
*/
/**************************************************************************/
void Adafruit_RA8875::PWM1out(uint8_t p) { writeReg(RA8875_P1DCR, p); }
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	70fb      	strb	r3, [r7, #3]
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	461a      	mov	r2, r3
 8001f52:	218b      	movs	r1, #139	; 0x8b
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f885 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_ZN15Adafruit_RA887510PWM1configEbh>:

    @param on Whether to enable the clock
    @param clock The Clock Divider
*/
/**************************************************************************/
void Adafruit_RA8875::PWM1config(bool on, uint8_t clock) {
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70fb      	strb	r3, [r7, #3]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	70bb      	strb	r3, [r7, #2]
  if (on) {
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00c      	beq.n	8001f92 <_ZN15Adafruit_RA887510PWM1configEbh+0x30>
    writeReg(RA8875_P1CR, RA8875_P1CR_ENABLE | (clock & 0xF));
 8001f78:	78bb      	ldrb	r3, [r7, #2]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	218a      	movs	r1, #138	; 0x8a
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f86a 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  } else {
    writeReg(RA8875_P1CR, RA8875_P1CR_DISABLE | (clock & 0xF));
  }
}
 8001f90:	e008      	b.n	8001fa4 <_ZN15Adafruit_RA887510PWM1configEbh+0x42>
    writeReg(RA8875_P1CR, RA8875_P1CR_DISABLE | (clock & 0xF));
 8001f92:	78bb      	ldrb	r3, [r7, #2]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	218a      	movs	r1, #138	; 0x8a
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f860 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_ZN15Adafruit_RA887511touchEnableEb>:
      Enables or disables the on-chip touch screen controller

      @param on Whether to turn touch sensing on or not
*/
/**************************************************************************/
void Adafruit_RA8875::touchEnable(bool on) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
  uint8_t adcClk = (uint8_t)RA8875_TPCR0_ADCCLK_DIV4;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	73fb      	strb	r3, [r7, #15]

  if (_size == RA8875_800x480) // match up touch size with LCD size
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d101      	bne.n	8001fca <_ZN15Adafruit_RA887511touchEnableEb+0x1e>
    adcClk = (uint8_t)RA8875_TPCR0_ADCCLK_DIV16;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	73fb      	strb	r3, [r7, #15]

  if (on) {
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01b      	beq.n	8002008 <_ZN15Adafruit_RA887511touchEnableEb+0x5c>
    /* Enable Touch Panel (Reg 0x70) */
    writeReg(RA8875_TPCR0, RA8875_TPCR0_ENABLE | RA8875_TPCR0_WAIT_4096CLK |
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	f063 0347 	orn	r3, r3, #71	; 0x47
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2170      	movs	r1, #112	; 0x70
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f841 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
                               RA8875_TPCR0_WAKEENABLE | adcClk); // 10mhz max!
    /* Set Auto Mode      (Reg 0x71) */
    writeReg(RA8875_TPCR1, RA8875_TPCR1_AUTO |
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	2171      	movs	r1, #113	; 0x71
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f83c 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
                               // RA8875_TPCR1_VREFEXT |
                               RA8875_TPCR1_DEBOUNCE);
    /* Enable TP INT */
    writeReg(RA8875_INTC1, readReg(RA8875_INTC1) | RA8875_INTC1_TP);
 8001fec:	21f0      	movs	r1, #240	; 0xf0
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f84e 	bl	8002090 <_ZN15Adafruit_RA88757readRegEh>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	21f0      	movs	r1, #240	; 0xf0
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f82f 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
    /* Disable TP INT */
    writeReg(RA8875_INTC1, readReg(RA8875_INTC1) & ~RA8875_INTC1_TP);
    /* Disable Touch Panel (Reg 0x70) */
    writeReg(RA8875_TPCR0, RA8875_TPCR0_DISABLE);
  }
}
 8002006:	e011      	b.n	800202c <_ZN15Adafruit_RA887511touchEnableEb+0x80>
    writeReg(RA8875_INTC1, readReg(RA8875_INTC1) & ~RA8875_INTC1_TP);
 8002008:	21f0      	movs	r1, #240	; 0xf0
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f840 	bl	8002090 <_ZN15Adafruit_RA88757readRegEh>
 8002010:	4603      	mov	r3, r0
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	21f0      	movs	r1, #240	; 0xf0
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f821 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
    writeReg(RA8875_TPCR0, RA8875_TPCR0_DISABLE);
 8002022:	2200      	movs	r2, #0
 8002024:	2170      	movs	r1, #112	; 0x70
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f81c 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZN15Adafruit_RA88759displayOnEb>:
      Turns the display on or off

      @param on Whether to turn the display on or not
*/
/**************************************************************************/
void Adafruit_RA8875::displayOn(bool on) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
  if (on)
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <_ZN15Adafruit_RA88759displayOnEb+0x1e>
    writeReg(RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPON);
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	2101      	movs	r1, #1
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f80a 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
  else
    writeReg(RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF);
}
 8002050:	e004      	b.n	800205c <_ZN15Adafruit_RA88759displayOnEb+0x28>
    writeReg(RA8875_PWRR, RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF);
 8002052:	2200      	movs	r2, #0
 8002054:	2101      	movs	r1, #1
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f804 	bl	8002064 <_ZN15Adafruit_RA88758writeRegEhh>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_ZN15Adafruit_RA88758writeRegEhh>:

    @param reg Register to write to
    @param val Value to write
*/
/**************************************************************************/
void Adafruit_RA8875::writeReg(uint8_t reg, uint8_t val) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
 8002070:	4613      	mov	r3, r2
 8002072:	70bb      	strb	r3, [r7, #2]
  writeCommand(reg);
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f876 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  writeData(val);
 800207e:	78bb      	ldrb	r3, [r7, #2]
 8002080:	4619      	mov	r1, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f817 	bl	80020b6 <_ZN15Adafruit_RA88759writeDataEh>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_ZN15Adafruit_RA88757readRegEh>:
    @param reg Register to read

    @return The value
*/
/**************************************************************************/
uint8_t Adafruit_RA8875::readReg(uint8_t reg) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
  writeCommand(reg);
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f862 	bl	800216a <_ZN15Adafruit_RA887512writeCommandEh>
  return readData();
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f832 	bl	8002110 <_ZN15Adafruit_RA88758readDataEv>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_ZN15Adafruit_RA88759writeDataEh>:
    Write data to the current register

    @param d Data to write
*/
/**************************************************************************/
void Adafruit_RA8875::writeData(uint8_t d) {
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	70fb      	strb	r3, [r7, #3]
  _cs.write(GPIO_PIN_RESET);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3310      	adds	r3, #16
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 f961 	bl	8002390 <_ZN4GPIO5writeE13GPIO_PinState>
  _spi.begin();
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3320      	adds	r3, #32
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fb1c 	bl	8002710 <_ZN3SPI5beginEv>
  _spi.transfer(RA8875_DATAWRITE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3320      	adds	r3, #32
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fae8 	bl	80026b4 <_ZN3SPI8transferEh>
  _spi.transfer(d);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3320      	adds	r3, #32
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fae1 	bl	80026b4 <_ZN3SPI8transferEh>
  _spi.end();
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3320      	adds	r3, #32
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fb1c 	bl	8002734 <_ZN3SPI3endEv>
  _cs.write(GPIO_PIN_SET);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3310      	adds	r3, #16
 8002100:	2101      	movs	r1, #1
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f944 	bl	8002390 <_ZN4GPIO5writeE13GPIO_PinState>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_ZN15Adafruit_RA88758readDataEv>:
    Read the data from the current register

    @return The Value
*/
/**************************************************************************/
uint8_t Adafruit_RA8875::readData(void) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  _cs.write(GPIO_PIN_RESET);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3310      	adds	r3, #16
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f936 	bl	8002390 <_ZN4GPIO5writeE13GPIO_PinState>
  _spi.begin();
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3320      	adds	r3, #32
 8002128:	4618      	mov	r0, r3
 800212a:	f000 faf1 	bl	8002710 <_ZN3SPI5beginEv>
  _spi.transfer(RA8875_DATAREAD);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3320      	adds	r3, #32
 8002132:	2140      	movs	r1, #64	; 0x40
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fabd 	bl	80026b4 <_ZN3SPI8transferEh>
  uint8_t x = _spi.transfer(0x0);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3320      	adds	r3, #32
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fab7 	bl	80026b4 <_ZN3SPI8transferEh>
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]
  _spi.end();
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3320      	adds	r3, #32
 800214e:	4618      	mov	r0, r3
 8002150:	f000 faf0 	bl	8002734 <_ZN3SPI3endEv>
  _cs.write(GPIO_PIN_SET);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3310      	adds	r3, #16
 8002158:	2101      	movs	r1, #1
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f918 	bl	8002390 <_ZN4GPIO5writeE13GPIO_PinState>
  return x;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_ZN15Adafruit_RA887512writeCommandEh>:
    Write a command to the current register

    @param d The data to write as a command
 */
/**************************************************************************/
void Adafruit_RA8875::writeCommand(uint8_t d) {
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	70fb      	strb	r3, [r7, #3]
  _cs.write(GPIO_PIN_RESET);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3310      	adds	r3, #16
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f000 f907 	bl	8002390 <_ZN4GPIO5writeE13GPIO_PinState>
  _spi.begin();
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3320      	adds	r3, #32
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fac2 	bl	8002710 <_ZN3SPI5beginEv>
  _spi.transfer(RA8875_CMDWRITE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3320      	adds	r3, #32
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fa8e 	bl	80026b4 <_ZN3SPI8transferEh>
  _spi.transfer(d);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3320      	adds	r3, #32
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fa87 	bl	80026b4 <_ZN3SPI8transferEh>
  _spi.end();
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3320      	adds	r3, #32
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fac2 	bl	8002734 <_ZN3SPI3endEv>
  _cs.write(GPIO_PIN_SET);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3310      	adds	r3, #16
 80021b4:	2101      	movs	r1, #1
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f8ea 	bl	8002390 <_ZN4GPIO5writeE13GPIO_PinState>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_ZN4GPIOC1EP12GPIO_TypeDefthh>:
#include "GPIO.hpp"

GPIO::GPIO(GPIO_TypeDef* port, uint16_t pin, uint8_t mode, uint8_t pull):
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	4611      	mov	r1, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	460b      	mov	r3, r1
 80021d4:	80fb      	strh	r3, [r7, #6]
 80021d6:	4613      	mov	r3, r2
 80021d8:	717b      	strb	r3, [r7, #5]
    _port(port),
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	601a      	str	r2, [r3, #0]
    _pin(pin),
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	88fa      	ldrh	r2, [r7, #6]
 80021e4:	809a      	strh	r2, [r3, #4]
    _mode(mode),
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	797a      	ldrb	r2, [r7, #5]
 80021ea:	719a      	strb	r2, [r3, #6]
    _pull(pull)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	7e3a      	ldrb	r2, [r7, #24]
 80021f0:	71da      	strb	r2, [r3, #7]
{
    init(mode, pull);
 80021f2:	7e3a      	ldrb	r2, [r7, #24]
 80021f4:	797b      	ldrb	r3, [r7, #5]
 80021f6:	4619      	mov	r1, r3
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f805 	bl	8002208 <_ZN4GPIO4initEhh>
}
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_ZN4GPIO4initEhh>:
        init(_mode, _pull);
    }
    return *this;
}

void GPIO::init(uint8_t mode, uint8_t pull) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	; 0x30
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
 8002214:	4613      	mov	r3, r2
 8002216:	70bb      	strb	r3, [r7, #2]
    if(_port == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE();
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a56      	ldr	r2, [pc, #344]	; (8002378 <_ZN4GPIO4initEhh+0x170>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10e      	bne.n	8002240 <_ZN4GPIO4initEhh+0x38>
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	4b55      	ldr	r3, [pc, #340]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a54      	ldr	r2, [pc, #336]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b52      	ldr	r3, [pc, #328]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	e04e      	b.n	80022de <_ZN4GPIO4initEhh+0xd6>
    else if(_port == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE();
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a4e      	ldr	r2, [pc, #312]	; (8002380 <_ZN4GPIO4initEhh+0x178>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10e      	bne.n	8002268 <_ZN4GPIO4initEhh+0x60>
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	4b4b      	ldr	r3, [pc, #300]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a4a      	ldr	r2, [pc, #296]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b48      	ldr	r3, [pc, #288]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	e03a      	b.n	80022de <_ZN4GPIO4initEhh+0xd6>
    else if(_port == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE();
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a45      	ldr	r2, [pc, #276]	; (8002384 <_ZN4GPIO4initEhh+0x17c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10e      	bne.n	8002290 <_ZN4GPIO4initEhh+0x88>
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b41      	ldr	r3, [pc, #260]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a40      	ldr	r2, [pc, #256]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b3e      	ldr	r3, [pc, #248]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	e026      	b.n	80022de <_ZN4GPIO4initEhh+0xd6>
    else if(_port == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE();
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a3c      	ldr	r2, [pc, #240]	; (8002388 <_ZN4GPIO4initEhh+0x180>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d10e      	bne.n	80022b8 <_ZN4GPIO4initEhh+0xb0>
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b37      	ldr	r3, [pc, #220]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a36      	ldr	r2, [pc, #216]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b34      	ldr	r3, [pc, #208]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	e012      	b.n	80022de <_ZN4GPIO4initEhh+0xd6>
    else if(_port == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a33      	ldr	r2, [pc, #204]	; (800238c <_ZN4GPIO4initEhh+0x184>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10d      	bne.n	80022de <_ZN4GPIO4initEhh+0xd6>
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a2c      	ldr	r2, [pc, #176]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 80022cc:	f043 0310 	orr.w	r3, r3, #16
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b2a      	ldr	r3, [pc, #168]	; (800237c <_ZN4GPIO4initEhh+0x174>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitTypeDef gpiopininit = {0};
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	611a      	str	r2, [r3, #16]

    gpiopininit.Pin = _pin;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	889b      	ldrh	r3, [r3, #4]
 80022f2:	61fb      	str	r3, [r7, #28]

    switch(mode) {
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d81f      	bhi.n	800233a <_ZN4GPIO4initEhh+0x132>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <_ZN4GPIO4initEhh+0xf8>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	08002315 	.word	0x08002315
 8002304:	0800231b 	.word	0x0800231b
 8002308:	08002321 	.word	0x08002321
 800230c:	08002327 	.word	0x08002327
 8002310:	08002331 	.word	0x08002331
        case PP_OUTPUT_MODE:
            gpiopininit.Mode = GPIO_MODE_OUTPUT_PP;
 8002314:	2301      	movs	r3, #1
 8002316:	623b      	str	r3, [r7, #32]
            break;
 8002318:	e00f      	b.n	800233a <_ZN4GPIO4initEhh+0x132>
        case INPUT_MODE:
            gpiopininit.Mode = GPIO_MODE_INPUT;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
            break;
 800231e:	e00c      	b.n	800233a <_ZN4GPIO4initEhh+0x132>
        case OD_OUTPUT_MODE:
            gpiopininit.Mode = GPIO_MODE_OUTPUT_OD;
 8002320:	2311      	movs	r3, #17
 8002322:	623b      	str	r3, [r7, #32]
            break;
 8002324:	e009      	b.n	800233a <_ZN4GPIO4initEhh+0x132>
        case AF_MODE_SPI_1_2:
            gpiopininit.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	623b      	str	r3, [r7, #32]
            gpiopininit.Alternate = GPIO_AF5_SPI1;
 800232a:	2305      	movs	r3, #5
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800232e:	e004      	b.n	800233a <_ZN4GPIO4initEhh+0x132>
        case AF_MODE_SPI_3:
            gpiopininit.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	623b      	str	r3, [r7, #32]
            gpiopininit.Alternate = GPIO_AF6_SPI3;
 8002334:	2306      	movs	r3, #6
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8002338:	bf00      	nop
    }

    switch(pull) {
 800233a:	78bb      	ldrb	r3, [r7, #2]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d00c      	beq.n	800235a <_ZN4GPIO4initEhh+0x152>
 8002340:	2b02      	cmp	r3, #2
 8002342:	dc0d      	bgt.n	8002360 <_ZN4GPIO4initEhh+0x158>
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <_ZN4GPIO4initEhh+0x146>
 8002348:	2b01      	cmp	r3, #1
 800234a:	d003      	beq.n	8002354 <_ZN4GPIO4initEhh+0x14c>
 800234c:	e008      	b.n	8002360 <_ZN4GPIO4initEhh+0x158>
        case NO_PULL:
            gpiopininit.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002352:	e005      	b.n	8002360 <_ZN4GPIO4initEhh+0x158>
        case PULL_DOWN:
            gpiopininit.Pull = GPIO_PULLDOWN;
 8002354:	2302      	movs	r3, #2
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002358:	e002      	b.n	8002360 <_ZN4GPIO4initEhh+0x158>
        case PULL_UP:
            gpiopininit.Pull = GPIO_PULLUP;
 800235a:	2301      	movs	r3, #1
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800235e:	bf00      	nop
    }

	HAL_GPIO_Init(_port, &gpiopininit);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f107 021c 	add.w	r2, r7, #28
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fbcc 	bl	8002b08 <HAL_GPIO_Init>
}
 8002370:	bf00      	nop
 8002372:	3730      	adds	r7, #48	; 0x30
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40020000 	.word	0x40020000
 800237c:	40023800 	.word	0x40023800
 8002380:	40020400 	.word	0x40020400
 8002384:	40020800 	.word	0x40020800
 8002388:	40020c00 	.word	0x40020c00
 800238c:	40021000 	.word	0x40021000

08002390 <_ZN4GPIO5writeE13GPIO_PinState>:

void GPIO::write(GPIO_PinState state) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(_port, _pin, state);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	889b      	ldrh	r3, [r3, #4]
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	4619      	mov	r1, r3
 80023a8:	f000 fd4a 	bl	8002e40 <HAL_GPIO_WritePin>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_ZN3SPIC1ERK10SPI_Config>:
#include "SPI.hpp"

SPI::SPI(const SPI_Config &config):
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    _pSPIx(config.SPIx),
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]
    // Initialize GPIO pins based on which SPI peripheral is being used
    _sck((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a48      	ldr	r2, [pc, #288]	; (80024f4 <_ZN3SPIC1ERK10SPI_Config+0x140>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d008      	beq.n	80023e8 <_ZN3SPIC1ERK10SPI_Config+0x34>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4a47      	ldr	r2, [pc, #284]	; (80024f8 <_ZN3SPIC1ERK10SPI_Config+0x144>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <_ZN3SPIC1ERK10SPI_Config+0x30>
 80023e0:	4946      	ldr	r1, [pc, #280]	; (80024fc <_ZN3SPIC1ERK10SPI_Config+0x148>)
 80023e2:	e002      	b.n	80023ea <_ZN3SPIC1ERK10SPI_Config+0x36>
 80023e4:	4946      	ldr	r1, [pc, #280]	; (8002500 <_ZN3SPIC1ERK10SPI_Config+0x14c>)
 80023e6:	e000      	b.n	80023ea <_ZN3SPIC1ERK10SPI_Config+0x36>
 80023e8:	4946      	ldr	r1, [pc, #280]	; (8002504 <_ZN3SPIC1ERK10SPI_Config+0x150>)
         (config.SPIx == SPI1) ? GPIO_PIN_5 : (config.SPIx == SPI2) ? GPIO_PIN_13 : GPIO_PIN_10,
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
    _sck((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 80023ee:	4a41      	ldr	r2, [pc, #260]	; (80024f4 <_ZN3SPIC1ERK10SPI_Config+0x140>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00a      	beq.n	800240a <_ZN3SPIC1ERK10SPI_Config+0x56>
         (config.SPIx == SPI1) ? GPIO_PIN_5 : (config.SPIx == SPI2) ? GPIO_PIN_13 : GPIO_PIN_10,
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a3f      	ldr	r2, [pc, #252]	; (80024f8 <_ZN3SPIC1ERK10SPI_Config+0x144>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d102      	bne.n	8002404 <_ZN3SPIC1ERK10SPI_Config+0x50>
 80023fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002402:	e003      	b.n	800240c <_ZN3SPIC1ERK10SPI_Config+0x58>
 8002404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002408:	e000      	b.n	800240c <_ZN3SPIC1ERK10SPI_Config+0x58>
    _sck((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 800240a:	2220      	movs	r2, #32
         (config.SPIx == SPI3) ? AF_MODE_SPI_3 : AF_MODE_SPI_1_2,
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
    _sck((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 8002410:	4c3d      	ldr	r4, [pc, #244]	; (8002508 <_ZN3SPIC1ERK10SPI_Config+0x154>)
 8002412:	42a3      	cmp	r3, r4
 8002414:	d101      	bne.n	800241a <_ZN3SPIC1ERK10SPI_Config+0x66>
 8002416:	2304      	movs	r3, #4
 8002418:	e000      	b.n	800241c <_ZN3SPIC1ERK10SPI_Config+0x68>
 800241a:	2303      	movs	r3, #3
 800241c:	2400      	movs	r4, #0
 800241e:	9400      	str	r4, [sp, #0]
 8002420:	f7ff fed0 	bl	80021c4 <_ZN4GPIOC1EP12GPIO_TypeDefthh>
         NO_PULL),
    _miso((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4a31      	ldr	r2, [pc, #196]	; (80024f4 <_ZN3SPIC1ERK10SPI_Config+0x140>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d008      	beq.n	8002446 <_ZN3SPIC1ERK10SPI_Config+0x92>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a2f      	ldr	r2, [pc, #188]	; (80024f8 <_ZN3SPIC1ERK10SPI_Config+0x144>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <_ZN3SPIC1ERK10SPI_Config+0x8e>
 800243e:	492f      	ldr	r1, [pc, #188]	; (80024fc <_ZN3SPIC1ERK10SPI_Config+0x148>)
 8002440:	e002      	b.n	8002448 <_ZN3SPIC1ERK10SPI_Config+0x94>
 8002442:	492f      	ldr	r1, [pc, #188]	; (8002500 <_ZN3SPIC1ERK10SPI_Config+0x14c>)
 8002444:	e000      	b.n	8002448 <_ZN3SPIC1ERK10SPI_Config+0x94>
 8002446:	492f      	ldr	r1, [pc, #188]	; (8002504 <_ZN3SPIC1ERK10SPI_Config+0x150>)
          (config.SPIx == SPI1) ? GPIO_PIN_6 : (config.SPIx == SPI2) ? GPIO_PIN_14 : GPIO_PIN_11,
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
    _miso((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 800244c:	4a29      	ldr	r2, [pc, #164]	; (80024f4 <_ZN3SPIC1ERK10SPI_Config+0x140>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00a      	beq.n	8002468 <_ZN3SPIC1ERK10SPI_Config+0xb4>
          (config.SPIx == SPI1) ? GPIO_PIN_6 : (config.SPIx == SPI2) ? GPIO_PIN_14 : GPIO_PIN_11,
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4a28      	ldr	r2, [pc, #160]	; (80024f8 <_ZN3SPIC1ERK10SPI_Config+0x144>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d102      	bne.n	8002462 <_ZN3SPIC1ERK10SPI_Config+0xae>
 800245c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002460:	e003      	b.n	800246a <_ZN3SPIC1ERK10SPI_Config+0xb6>
 8002462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002466:	e000      	b.n	800246a <_ZN3SPIC1ERK10SPI_Config+0xb6>
    _miso((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 8002468:	2240      	movs	r2, #64	; 0x40
          (config.SPIx == SPI3) ? AF_MODE_SPI_3 : AF_MODE_SPI_1_2,
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
    _miso((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 800246e:	4c26      	ldr	r4, [pc, #152]	; (8002508 <_ZN3SPIC1ERK10SPI_Config+0x154>)
 8002470:	42a3      	cmp	r3, r4
 8002472:	d101      	bne.n	8002478 <_ZN3SPIC1ERK10SPI_Config+0xc4>
 8002474:	2304      	movs	r3, #4
 8002476:	e000      	b.n	800247a <_ZN3SPIC1ERK10SPI_Config+0xc6>
 8002478:	2303      	movs	r3, #3
 800247a:	2400      	movs	r4, #0
 800247c:	9400      	str	r4, [sp, #0]
 800247e:	f7ff fea1 	bl	80021c4 <_ZN4GPIOC1EP12GPIO_TypeDefthh>
          NO_PULL),
    _mosi((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <_ZN3SPIC1ERK10SPI_Config+0x140>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d008      	beq.n	80024a4 <_ZN3SPIC1ERK10SPI_Config+0xf0>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <_ZN3SPIC1ERK10SPI_Config+0x144>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <_ZN3SPIC1ERK10SPI_Config+0xec>
 800249c:	4917      	ldr	r1, [pc, #92]	; (80024fc <_ZN3SPIC1ERK10SPI_Config+0x148>)
 800249e:	e002      	b.n	80024a6 <_ZN3SPIC1ERK10SPI_Config+0xf2>
 80024a0:	4917      	ldr	r1, [pc, #92]	; (8002500 <_ZN3SPIC1ERK10SPI_Config+0x14c>)
 80024a2:	e000      	b.n	80024a6 <_ZN3SPIC1ERK10SPI_Config+0xf2>
 80024a4:	4917      	ldr	r1, [pc, #92]	; (8002504 <_ZN3SPIC1ERK10SPI_Config+0x150>)
          (config.SPIx == SPI1) ? GPIO_PIN_7 : (config.SPIx == SPI2) ? GPIO_PIN_15 : GPIO_PIN_12,
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
    _mosi((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <_ZN3SPIC1ERK10SPI_Config+0x140>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00a      	beq.n	80024c6 <_ZN3SPIC1ERK10SPI_Config+0x112>
          (config.SPIx == SPI1) ? GPIO_PIN_7 : (config.SPIx == SPI2) ? GPIO_PIN_15 : GPIO_PIN_12,
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <_ZN3SPIC1ERK10SPI_Config+0x144>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d102      	bne.n	80024c0 <_ZN3SPIC1ERK10SPI_Config+0x10c>
 80024ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024be:	e003      	b.n	80024c8 <_ZN3SPIC1ERK10SPI_Config+0x114>
 80024c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024c4:	e000      	b.n	80024c8 <_ZN3SPIC1ERK10SPI_Config+0x114>
    _mosi((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 80024c6:	2280      	movs	r2, #128	; 0x80
          (config.SPIx == SPI3) ? AF_MODE_SPI_3 : AF_MODE_SPI_1_2,
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
    _mosi((config.SPIx == SPI1) ? GPIOA : (config.SPIx == SPI2) ? GPIOB : GPIOC,
 80024cc:	4c0e      	ldr	r4, [pc, #56]	; (8002508 <_ZN3SPIC1ERK10SPI_Config+0x154>)
 80024ce:	42a3      	cmp	r3, r4
 80024d0:	d101      	bne.n	80024d6 <_ZN3SPIC1ERK10SPI_Config+0x122>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e000      	b.n	80024d8 <_ZN3SPIC1ERK10SPI_Config+0x124>
 80024d6:	2303      	movs	r3, #3
 80024d8:	2400      	movs	r4, #0
 80024da:	9400      	str	r4, [sp, #0]
 80024dc:	f7ff fe72 	bl	80021c4 <_ZN4GPIOC1EP12GPIO_TypeDefthh>
          NO_PULL)
{
    init(config);
 80024e0:	6839      	ldr	r1, [r7, #0]
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f812 	bl	800250c <_ZN3SPI4initERK10SPI_Config>
}
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40013000 	.word	0x40013000
 80024f8:	40003800 	.word	0x40003800
 80024fc:	40020400 	.word	0x40020400
 8002500:	40020800 	.word	0x40020800
 8002504:	40020000 	.word	0x40020000
 8002508:	40003c00 	.word	0x40003c00

0800250c <_ZN3SPI4initERK10SPI_Config>:

void SPI::init(const SPI_Config &config) {
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b08e      	sub	sp, #56	; 0x38
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef _spiInit = {0};
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	222c      	movs	r2, #44	; 0x2c
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f001 f9ab 	bl	800387a <memset>

    configureClock();
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f88f 	bl	8002648 <_ZN3SPI14configureClockEv>

     // Set device mode (Master/Slave)
    _spiInit.Mode = (config.SPI_DeviceMode == DEVICE_MODE_MASTER) ?
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d102      	bne.n	8002538 <_ZN3SPI4initERK10SPI_Config+0x2c>
 8002532:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002536:	e000      	b.n	800253a <_ZN3SPI4initERK10SPI_Config+0x2e>
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
                    SPI_MODE_MASTER : SPI_MODE_SLAVE;

    // Set clock polarity and phase based on SPI mode
    switch(config.SPI_Mode) {
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	785b      	ldrb	r3, [r3, #1]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d81f      	bhi.n	8002584 <_ZN3SPI4initERK10SPI_Config+0x78>
 8002544:	a201      	add	r2, pc, #4	; (adr r2, 800254c <_ZN3SPI4initERK10SPI_Config+0x40>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	0800255d 	.word	0x0800255d
 8002550:	08002567 	.word	0x08002567
 8002554:	08002571 	.word	0x08002571
 8002558:	0800257b 	.word	0x0800257b
        case SPI_MODE_0:
            _spiInit.CLKPolarity = SPI_POLARITY_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
            _spiInit.CLKPhase = SPI_PHASE_1EDGE;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
            break;
 8002564:	e00e      	b.n	8002584 <_ZN3SPI4initERK10SPI_Config+0x78>
        case SPI_MODE_1:
            _spiInit.CLKPolarity = SPI_POLARITY_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
            _spiInit.CLKPhase = SPI_PHASE_2EDGE;
 800256a:	2301      	movs	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
            break;
 800256e:	e009      	b.n	8002584 <_ZN3SPI4initERK10SPI_Config+0x78>
        case SPI_MODE_2:
            _spiInit.CLKPolarity = SPI_POLARITY_HIGH;
 8002570:	2302      	movs	r3, #2
 8002572:	61bb      	str	r3, [r7, #24]
            _spiInit.CLKPhase = SPI_PHASE_1EDGE;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
            break;
 8002578:	e004      	b.n	8002584 <_ZN3SPI4initERK10SPI_Config+0x78>
        case SPI_MODE_3:
            _spiInit.CLKPolarity = SPI_POLARITY_HIGH;
 800257a:	2302      	movs	r3, #2
 800257c:	61bb      	str	r3, [r7, #24]
            _spiInit.CLKPhase = SPI_PHASE_2EDGE;
 800257e:	2301      	movs	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
            break;
 8002582:	bf00      	nop
    }
    
    // Set baud rate
    switch(config.SPI_BaudRate) {
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	789b      	ldrb	r3, [r3, #2]
 8002588:	2b07      	cmp	r3, #7
 800258a:	d82b      	bhi.n	80025e4 <_ZN3SPI4initERK10SPI_Config+0xd8>
 800258c:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <_ZN3SPI4initERK10SPI_Config+0x88>)
 800258e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002592:	bf00      	nop
 8002594:	080025b5 	.word	0x080025b5
 8002598:	080025bb 	.word	0x080025bb
 800259c:	080025c1 	.word	0x080025c1
 80025a0:	080025c7 	.word	0x080025c7
 80025a4:	080025cd 	.word	0x080025cd
 80025a8:	080025d3 	.word	0x080025d3
 80025ac:	080025d9 	.word	0x080025d9
 80025b0:	080025df 	.word	0x080025df
        case BR_DIV2:   _spiInit.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;   break;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
 80025b8:	e014      	b.n	80025e4 <_ZN3SPI4initERK10SPI_Config+0xd8>
        case BR_DIV4:   _spiInit.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;   break;
 80025ba:	2308      	movs	r3, #8
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	e011      	b.n	80025e4 <_ZN3SPI4initERK10SPI_Config+0xd8>
        case BR_DIV8:   _spiInit.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;   break;
 80025c0:	2310      	movs	r3, #16
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
 80025c4:	e00e      	b.n	80025e4 <_ZN3SPI4initERK10SPI_Config+0xd8>
        case BR_DIV16:  _spiInit.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;  break;
 80025c6:	2318      	movs	r3, #24
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ca:	e00b      	b.n	80025e4 <_ZN3SPI4initERK10SPI_Config+0xd8>
        case BR_DIV32:  _spiInit.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;  break;
 80025cc:	2320      	movs	r3, #32
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
 80025d0:	e008      	b.n	80025e4 <_ZN3SPI4initERK10SPI_Config+0xd8>
        case BR_DIV64:  _spiInit.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;  break;
 80025d2:	2328      	movs	r3, #40	; 0x28
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	e005      	b.n	80025e4 <_ZN3SPI4initERK10SPI_Config+0xd8>
        case BR_DIV128: _spiInit.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; break;
 80025d8:	2330      	movs	r3, #48	; 0x30
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
 80025dc:	e002      	b.n	80025e4 <_ZN3SPI4initERK10SPI_Config+0xd8>
        case BR_DIV256: _spiInit.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; break;
 80025de:	2338      	movs	r3, #56	; 0x38
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
 80025e2:	bf00      	nop
    }

    _spiInit.Direction = SPI_DIRECTION_2LINES; // full-duplex
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
    _spiInit.DataSize = SPI_DATASIZE_8BIT;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
    _spiInit.NSS = SPI_NSS_SOFT;
 80025ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025f0:	623b      	str	r3, [r7, #32]
    _spiInit.FirstBit = SPI_FIRSTBIT_MSB;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28

    _pSPIx = config.SPIx;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	601a      	str	r2, [r3, #0]
    _spiHandle.Instance = _pSPIx;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	605a      	str	r2, [r3, #4]
    _spiHandle.Init = _spiInit;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f103 0408 	add.w	r4, r3, #8
 800260c:	f107 050c 	add.w	r5, r7, #12
 8002610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800261c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    // Initialize SPI using HAL
    if(HAL_SPI_Init(&_spiHandle) != HAL_OK) {
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	4618      	mov	r0, r3
 8002626:	f001 f895 	bl	8003754 <HAL_SPI_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <_ZN3SPI4initERK10SPI_Config+0x132>
        Error_Handler();
 800263a:	f7fd ff4b 	bl	80004d4 <Error_Handler>
    }
}
 800263e:	bf00      	nop
 8002640:	3738      	adds	r7, #56	; 0x38
 8002642:	46bd      	mov	sp, r7
 8002644:	bdb0      	pop	{r4, r5, r7, pc}
 8002646:	bf00      	nop

08002648 <_ZN3SPI14configureClockEv>:

void SPI::configureClock() {
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    if(_pSPIx == SPI1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <_ZN3SPI14configureClockEv+0x5c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d106      	bne.n	8002668 <_ZN3SPI14configureClockEv+0x20>
		{
			SPI1_PCLK_EN();
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <_ZN3SPI14configureClockEv+0x60>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <_ZN3SPI14configureClockEv+0x60>)
 8002660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
		}
    else if(_pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
}
 8002666:	e016      	b.n	8002696 <_ZN3SPI14configureClockEv+0x4e>
    else if(_pSPIx == SPI2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <_ZN3SPI14configureClockEv+0x64>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d106      	bne.n	8002680 <_ZN3SPI14configureClockEv+0x38>
			SPI2_PCLK_EN();
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <_ZN3SPI14configureClockEv+0x60>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <_ZN3SPI14configureClockEv+0x60>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800267e:	e00a      	b.n	8002696 <_ZN3SPI14configureClockEv+0x4e>
    else if(_pSPIx == SPI3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <_ZN3SPI14configureClockEv+0x68>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d105      	bne.n	8002696 <_ZN3SPI14configureClockEv+0x4e>
			SPI3_PCLK_EN();
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <_ZN3SPI14configureClockEv+0x60>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <_ZN3SPI14configureClockEv+0x60>)
 8002690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40013000 	.word	0x40013000
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40003800 	.word	0x40003800
 80026b0:	40003c00 	.word	0x40003c00

080026b4 <_ZN3SPI8transferEh>:

uint8_t SPI::transfer(uint8_t data) {
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	70fb      	strb	r3, [r7, #3]
    // Wait until TXE is set (Transmit buffer empty)
    while (!(_pSPIx->SR & SPI_SR_TXE));
 80026c0:	bf00      	nop
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f3      	bne.n	80026c2 <_ZN3SPI8transferEh+0xe>
    
    // Send data
    _pSPIx->DR = data;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	60da      	str	r2, [r3, #12]
    
    // Wait until RXNE is set (Receive buffer not empty)
    while (!(_pSPIx->SR & SPI_SR_RXNE));
 80026e2:	bf00      	nop
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bf0c      	ite	eq
 80026f2:	2301      	moveq	r3, #1
 80026f4:	2300      	movne	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f3      	bne.n	80026e4 <_ZN3SPI8transferEh+0x30>
    
    // Return received data
    return _pSPIx->DR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	b2db      	uxtb	r3, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_ZN3SPI5beginEv>:
    received |= transfer(data & 0xFF);

    return received;
}

void SPI::begin(void) {
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
    _pSPIx->CR1 |= SPI_CR1_SPE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002726:	601a      	str	r2, [r3, #0]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_ZN3SPI3endEv>:

void SPI::end(void) {
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
    while (_pSPIx->SR & SPI_SR_BSY);  // Wait until not busy
 800273c:	bf00      	nop
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf14      	ite	ne
 800274c:	2301      	movne	r3, #1
 800274e:	2300      	moveq	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f3      	bne.n	800273e <_ZN3SPI3endEv+0xa>
    _pSPIx->CR1 &= ~SPI_CR1_SPE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002764:	601a      	str	r2, [r3, #0]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002778:	f7fe f89e 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800277c:	480c      	ldr	r0, [pc, #48]	; (80027b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800277e:	490d      	ldr	r1, [pc, #52]	; (80027b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002784:	e002      	b.n	800278c <LoopCopyDataInit>

08002786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278a:	3304      	adds	r3, #4

0800278c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800278c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002790:	d3f9      	bcc.n	8002786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002794:	4c0a      	ldr	r4, [pc, #40]	; (80027c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002798:	e001      	b.n	800279e <LoopFillZerobss>

0800279a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800279c:	3204      	adds	r2, #4

0800279e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a0:	d3fb      	bcc.n	800279a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027a2:	f001 f873 	bl	800388c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027a6:	f7fd fe99 	bl	80004dc <main>
  bx  lr    
 80027aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80027b8:	08003924 	.word	0x08003924
  ldr r2, =_sbss
 80027bc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80027c0:	2000003c 	.word	0x2000003c

080027c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c4:	e7fe      	b.n	80027c4 <ADC_IRQHandler>
	...

080027c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_Init+0x40>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <HAL_Init+0x40>)
 80027d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_Init+0x40>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <HAL_Init+0x40>)
 80027de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a07      	ldr	r2, [pc, #28]	; (8002808 <HAL_Init+0x40>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f0:	2003      	movs	r0, #3
 80027f2:	f000 f939 	bl	8002a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f000 f810 	bl	800281c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fc:	f000 f806 	bl	800280c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00

0800280c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_InitTick+0x54>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_InitTick+0x58>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	4619      	mov	r1, r3
 800282e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002832:	fbb3 f3f1 	udiv	r3, r3, r1
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f93b 	bl	8002ab6 <HAL_SYSTICK_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e00e      	b.n	8002868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d80a      	bhi.n	8002866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002850:	2200      	movs	r2, #0
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f000 f911 	bl	8002a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800285c:	4a06      	ldr	r2, [pc, #24]	; (8002878 <HAL_InitTick+0x5c>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000010 	.word	0x20000010
 8002874:	20000018 	.word	0x20000018
 8002878:	20000014 	.word	0x20000014

0800287c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x20>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_IncTick+0x24>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_IncTick+0x24>)
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000018 	.word	0x20000018
 80028a0:	20000038 	.word	0x20000038

080028a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return uwTick;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_GetTick+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000038 	.word	0x20000038

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff ffee 	bl	80028a4 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_Delay+0x44>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffde 	bl	80028a4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000018 	.word	0x20000018

08002904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800292c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <__NVIC_GetPriorityGrouping+0x18>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 0307 	and.w	r3, r3, #7
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	490c      	ldr	r1, [pc, #48]	; (80029b4 <__NVIC_SetPriority+0x4c>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4908      	ldr	r1, [pc, #32]	; (80029b8 <__NVIC_SetPriority+0x50>)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3b04      	subs	r3, #4
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	4313      	orrs	r3, r2
         );
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a34:	d301      	bcc.n	8002a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <SysTick_Config+0x40>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a42:	210f      	movs	r1, #15
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f7ff ff8e 	bl	8002968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <SysTick_Config+0x40>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <SysTick_Config+0x40>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff47 	bl	8002904 <__NVIC_SetPriorityGrouping>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a90:	f7ff ff5c 	bl	800294c <__NVIC_GetPriorityGrouping>
 8002a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f7ff ff8e 	bl	80029bc <NVIC_EncodePriority>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff5d 	bl	8002968 <__NVIC_SetPriority>
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffb0 	bl	8002a24 <SysTick_Config>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d106      	bne.n	8002aec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002aea:	e005      	b.n	8002af8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002af2:	f023 0304 	bic.w	r3, r3, #4
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	e16b      	b.n	8002dfc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b24:	2201      	movs	r2, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	f040 815a 	bne.w	8002df6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d005      	beq.n	8002b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d130      	bne.n	8002bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	2203      	movs	r2, #3
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b90:	2201      	movs	r2, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 0201 	and.w	r2, r3, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d017      	beq.n	8002bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d123      	bne.n	8002c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	08da      	lsrs	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3208      	adds	r2, #8
 8002c46:	69b9      	ldr	r1, [r7, #24]
 8002c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0203 	and.w	r2, r3, #3
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80b4 	beq.w	8002df6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b60      	ldr	r3, [pc, #384]	; (8002e14 <HAL_GPIO_Init+0x30c>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	4a5f      	ldr	r2, [pc, #380]	; (8002e14 <HAL_GPIO_Init+0x30c>)
 8002c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9e:	4b5d      	ldr	r3, [pc, #372]	; (8002e14 <HAL_GPIO_Init+0x30c>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002caa:	4a5b      	ldr	r2, [pc, #364]	; (8002e18 <HAL_GPIO_Init+0x310>)
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	089b      	lsrs	r3, r3, #2
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	220f      	movs	r2, #15
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	; (8002e1c <HAL_GPIO_Init+0x314>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d02b      	beq.n	8002d2e <HAL_GPIO_Init+0x226>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a51      	ldr	r2, [pc, #324]	; (8002e20 <HAL_GPIO_Init+0x318>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d025      	beq.n	8002d2a <HAL_GPIO_Init+0x222>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a50      	ldr	r2, [pc, #320]	; (8002e24 <HAL_GPIO_Init+0x31c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d01f      	beq.n	8002d26 <HAL_GPIO_Init+0x21e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4f      	ldr	r2, [pc, #316]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d019      	beq.n	8002d22 <HAL_GPIO_Init+0x21a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a4e      	ldr	r2, [pc, #312]	; (8002e2c <HAL_GPIO_Init+0x324>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_GPIO_Init+0x216>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a4d      	ldr	r2, [pc, #308]	; (8002e30 <HAL_GPIO_Init+0x328>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00d      	beq.n	8002d1a <HAL_GPIO_Init+0x212>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4c      	ldr	r2, [pc, #304]	; (8002e34 <HAL_GPIO_Init+0x32c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <HAL_GPIO_Init+0x20e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4b      	ldr	r2, [pc, #300]	; (8002e38 <HAL_GPIO_Init+0x330>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_GPIO_Init+0x20a>
 8002d0e:	2307      	movs	r3, #7
 8002d10:	e00e      	b.n	8002d30 <HAL_GPIO_Init+0x228>
 8002d12:	2308      	movs	r3, #8
 8002d14:	e00c      	b.n	8002d30 <HAL_GPIO_Init+0x228>
 8002d16:	2306      	movs	r3, #6
 8002d18:	e00a      	b.n	8002d30 <HAL_GPIO_Init+0x228>
 8002d1a:	2305      	movs	r3, #5
 8002d1c:	e008      	b.n	8002d30 <HAL_GPIO_Init+0x228>
 8002d1e:	2304      	movs	r3, #4
 8002d20:	e006      	b.n	8002d30 <HAL_GPIO_Init+0x228>
 8002d22:	2303      	movs	r3, #3
 8002d24:	e004      	b.n	8002d30 <HAL_GPIO_Init+0x228>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e002      	b.n	8002d30 <HAL_GPIO_Init+0x228>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_GPIO_Init+0x228>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	f002 0203 	and.w	r2, r2, #3
 8002d36:	0092      	lsls	r2, r2, #2
 8002d38:	4093      	lsls	r3, r2
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d40:	4935      	ldr	r1, [pc, #212]	; (8002e18 <HAL_GPIO_Init+0x310>)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	3302      	adds	r3, #2
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	; (8002e3c <HAL_GPIO_Init+0x334>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d72:	4a32      	ldr	r2, [pc, #200]	; (8002e3c <HAL_GPIO_Init+0x334>)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d78:	4b30      	ldr	r3, [pc, #192]	; (8002e3c <HAL_GPIO_Init+0x334>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d9c:	4a27      	ldr	r2, [pc, #156]	; (8002e3c <HAL_GPIO_Init+0x334>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002da2:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <HAL_GPIO_Init+0x334>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dc6:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <HAL_GPIO_Init+0x334>)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_GPIO_Init+0x334>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df0:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <HAL_GPIO_Init+0x334>)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b0f      	cmp	r3, #15
 8002e00:	f67f ae90 	bls.w	8002b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	3724      	adds	r7, #36	; 0x24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40013800 	.word	0x40013800
 8002e1c:	40020000 	.word	0x40020000
 8002e20:	40020400 	.word	0x40020400
 8002e24:	40020800 	.word	0x40020800
 8002e28:	40020c00 	.word	0x40020c00
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40021400 	.word	0x40021400
 8002e34:	40021800 	.word	0x40021800
 8002e38:	40021c00 	.word	0x40021c00
 8002e3c:	40013c00 	.word	0x40013c00

08002e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e50:	787b      	ldrb	r3, [r7, #1]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e5c:	e003      	b.n	8002e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e5e:	887b      	ldrh	r3, [r7, #2]
 8002e60:	041a      	lsls	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	619a      	str	r2, [r3, #24]
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e267      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d075      	beq.n	8002f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e92:	4b88      	ldr	r3, [pc, #544]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9e:	4b85      	ldr	r3, [pc, #532]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d112      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eaa:	4b82      	ldr	r3, [pc, #520]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	4b7e      	ldr	r3, [pc, #504]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d05b      	beq.n	8002f7c <HAL_RCC_OscConfig+0x108>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d157      	bne.n	8002f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e242      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x74>
 8002eda:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a75      	ldr	r2, [pc, #468]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e01d      	b.n	8002f24 <HAL_RCC_OscConfig+0xb0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x98>
 8002ef2:	4b70      	ldr	r3, [pc, #448]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a6f      	ldr	r2, [pc, #444]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b6d      	ldr	r3, [pc, #436]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6c      	ldr	r2, [pc, #432]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0xb0>
 8002f0c:	4b69      	ldr	r3, [pc, #420]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a68      	ldr	r2, [pc, #416]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b66      	ldr	r3, [pc, #408]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a65      	ldr	r2, [pc, #404]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d013      	beq.n	8002f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7ff fcba 	bl	80028a4 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7ff fcb6 	bl	80028a4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e207      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	4b5b      	ldr	r3, [pc, #364]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0xc0>
 8002f52:	e014      	b.n	8002f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7ff fca6 	bl	80028a4 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7ff fca2 	bl	80028a4 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e1f3      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6e:	4b51      	ldr	r3, [pc, #324]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0xe8>
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d063      	beq.n	8003052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f8a:	4b4a      	ldr	r3, [pc, #296]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f96:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d11c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa2:	4b44      	ldr	r3, [pc, #272]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d116      	bne.n	8002fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fae:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x152>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e1c7      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4937      	ldr	r1, [pc, #220]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	e03a      	b.n	8003052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe4:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <HAL_RCC_OscConfig+0x244>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7ff fc5b 	bl	80028a4 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7ff fc57 	bl	80028a4 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e1a8      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003010:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4925      	ldr	r1, [pc, #148]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
 8003024:	e015      	b.n	8003052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCC_OscConfig+0x244>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7ff fc3a 	bl	80028a4 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003034:	f7ff fc36 	bl	80028a4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e187      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d036      	beq.n	80030cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d016      	beq.n	8003094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_RCC_OscConfig+0x248>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7ff fc1a 	bl	80028a4 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003074:	f7ff fc16 	bl	80028a4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e167      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_OscConfig+0x240>)
 8003088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x200>
 8003092:	e01b      	b.n	80030cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003094:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_OscConfig+0x248>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309a:	f7ff fc03 	bl	80028a4 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	e00e      	b.n	80030c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a2:	f7ff fbff 	bl	80028a4 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d907      	bls.n	80030c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e150      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
 80030b4:	40023800 	.word	0x40023800
 80030b8:	42470000 	.word	0x42470000
 80030bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c0:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 80030c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ea      	bne.n	80030a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8097 	beq.w	8003208 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030de:	4b81      	ldr	r3, [pc, #516]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10f      	bne.n	800310a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	4b7d      	ldr	r3, [pc, #500]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a7c      	ldr	r2, [pc, #496]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b7a      	ldr	r3, [pc, #488]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b77      	ldr	r3, [pc, #476]	; (80032e8 <HAL_RCC_OscConfig+0x474>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d118      	bne.n	8003148 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003116:	4b74      	ldr	r3, [pc, #464]	; (80032e8 <HAL_RCC_OscConfig+0x474>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a73      	ldr	r2, [pc, #460]	; (80032e8 <HAL_RCC_OscConfig+0x474>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003122:	f7ff fbbf 	bl	80028a4 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312a:	f7ff fbbb 	bl	80028a4 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e10c      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	4b6a      	ldr	r3, [pc, #424]	; (80032e8 <HAL_RCC_OscConfig+0x474>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d106      	bne.n	800315e <HAL_RCC_OscConfig+0x2ea>
 8003150:	4b64      	ldr	r3, [pc, #400]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	4a63      	ldr	r2, [pc, #396]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6713      	str	r3, [r2, #112]	; 0x70
 800315c:	e01c      	b.n	8003198 <HAL_RCC_OscConfig+0x324>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b05      	cmp	r3, #5
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x30c>
 8003166:	4b5f      	ldr	r3, [pc, #380]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	4a5e      	ldr	r2, [pc, #376]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	6713      	str	r3, [r2, #112]	; 0x70
 8003172:	4b5c      	ldr	r3, [pc, #368]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	4a5b      	ldr	r2, [pc, #364]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
 800317e:	e00b      	b.n	8003198 <HAL_RCC_OscConfig+0x324>
 8003180:	4b58      	ldr	r3, [pc, #352]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003184:	4a57      	ldr	r2, [pc, #348]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	6713      	str	r3, [r2, #112]	; 0x70
 800318c:	4b55      	ldr	r3, [pc, #340]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	4a54      	ldr	r2, [pc, #336]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003192:	f023 0304 	bic.w	r3, r3, #4
 8003196:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d015      	beq.n	80031cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7ff fb80 	bl	80028a4 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a6:	e00a      	b.n	80031be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7ff fb7c 	bl	80028a4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e0cb      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031be:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0ee      	beq.n	80031a8 <HAL_RCC_OscConfig+0x334>
 80031ca:	e014      	b.n	80031f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031cc:	f7ff fb6a 	bl	80028a4 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7ff fb66 	bl	80028a4 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0b5      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ea:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1ee      	bne.n	80031d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d105      	bne.n	8003208 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fc:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	4a38      	ldr	r2, [pc, #224]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003206:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80a1 	beq.w	8003354 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003212:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b08      	cmp	r3, #8
 800321c:	d05c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d141      	bne.n	80032aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003226:	4b31      	ldr	r3, [pc, #196]	; (80032ec <HAL_RCC_OscConfig+0x478>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7ff fb3a 	bl	80028a4 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003234:	f7ff fb36 	bl	80028a4 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e087      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003246:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	019b      	lsls	r3, r3, #6
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	3b01      	subs	r3, #1
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	491b      	ldr	r1, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_RCC_OscConfig+0x478>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003282:	f7ff fb0f 	bl	80028a4 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328a:	f7ff fb0b 	bl	80028a4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e05c      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x416>
 80032a8:	e054      	b.n	8003354 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_RCC_OscConfig+0x478>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7ff faf8 	bl	80028a4 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b8:	f7ff faf4 	bl	80028a4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e045      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RCC_OscConfig+0x470>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x444>
 80032d6:	e03d      	b.n	8003354 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e038      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40007000 	.word	0x40007000
 80032ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x4ec>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d028      	beq.n	8003350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d121      	bne.n	8003350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d11a      	bne.n	8003350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003326:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003328:	4293      	cmp	r3, r2
 800332a:	d111      	bne.n	8003350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	3b01      	subs	r3, #1
 800333a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d107      	bne.n	8003350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800

08003364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0cc      	b.n	8003512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003378:	4b68      	ldr	r3, [pc, #416]	; (800351c <HAL_RCC_ClockConfig+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d90c      	bls.n	80033a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b65      	ldr	r3, [pc, #404]	; (800351c <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338e:	4b63      	ldr	r3, [pc, #396]	; (800351c <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0b8      	b.n	8003512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d020      	beq.n	80033ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b8:	4b59      	ldr	r3, [pc, #356]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a58      	ldr	r2, [pc, #352]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4a52      	ldr	r2, [pc, #328]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033dc:	4b50      	ldr	r3, [pc, #320]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	494d      	ldr	r1, [pc, #308]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d044      	beq.n	8003484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d107      	bne.n	8003412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	4b47      	ldr	r3, [pc, #284]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d119      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e07f      	b.n	8003512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d003      	beq.n	8003422 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341e:	2b03      	cmp	r3, #3
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003422:	4b3f      	ldr	r3, [pc, #252]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e06f      	b.n	8003512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003432:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e067      	b.n	8003512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003442:	4b37      	ldr	r3, [pc, #220]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f023 0203 	bic.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4934      	ldr	r1, [pc, #208]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	4313      	orrs	r3, r2
 8003452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003454:	f7ff fa26 	bl	80028a4 <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	e00a      	b.n	8003472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7ff fa22 	bl	80028a4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e04f      	b.n	8003512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 020c 	and.w	r2, r3, #12
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	429a      	cmp	r2, r3
 8003482:	d1eb      	bne.n	800345c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003484:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_RCC_ClockConfig+0x1b8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d20c      	bcs.n	80034ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b22      	ldr	r3, [pc, #136]	; (800351c <HAL_RCC_ClockConfig+0x1b8>)
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	4b20      	ldr	r3, [pc, #128]	; (800351c <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e032      	b.n	8003512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b8:	4b19      	ldr	r3, [pc, #100]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4916      	ldr	r1, [pc, #88]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	490e      	ldr	r1, [pc, #56]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ea:	f000 f821 	bl	8003530 <HAL_RCC_GetSysClockFreq>
 80034ee:	4602      	mov	r2, r0
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	490a      	ldr	r1, [pc, #40]	; (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 80034fc:	5ccb      	ldrb	r3, [r1, r3]
 80034fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003502:	4a09      	ldr	r2, [pc, #36]	; (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCC_ClockConfig+0x1c8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff f986 	bl	800281c <HAL_InitTick>

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40023c00 	.word	0x40023c00
 8003520:	40023800 	.word	0x40023800
 8003524:	080038f4 	.word	0x080038f4
 8003528:	20000010 	.word	0x20000010
 800352c:	20000014 	.word	0x20000014

08003530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003534:	b094      	sub	sp, #80	; 0x50
 8003536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003548:	4b79      	ldr	r3, [pc, #484]	; (8003730 <HAL_RCC_GetSysClockFreq+0x200>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b08      	cmp	r3, #8
 8003552:	d00d      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x40>
 8003554:	2b08      	cmp	r3, #8
 8003556:	f200 80e1 	bhi.w	800371c <HAL_RCC_GetSysClockFreq+0x1ec>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0x34>
 800355e:	2b04      	cmp	r3, #4
 8003560:	d003      	beq.n	800356a <HAL_RCC_GetSysClockFreq+0x3a>
 8003562:	e0db      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b73      	ldr	r3, [pc, #460]	; (8003734 <HAL_RCC_GetSysClockFreq+0x204>)
 8003566:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003568:	e0db      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800356a:	4b73      	ldr	r3, [pc, #460]	; (8003738 <HAL_RCC_GetSysClockFreq+0x208>)
 800356c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800356e:	e0d8      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003570:	4b6f      	ldr	r3, [pc, #444]	; (8003730 <HAL_RCC_GetSysClockFreq+0x200>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003578:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800357a:	4b6d      	ldr	r3, [pc, #436]	; (8003730 <HAL_RCC_GetSysClockFreq+0x200>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d063      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003586:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCC_GetSysClockFreq+0x200>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	2200      	movs	r2, #0
 800358e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003590:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003598:	633b      	str	r3, [r7, #48]	; 0x30
 800359a:	2300      	movs	r3, #0
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
 800359e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035a2:	4622      	mov	r2, r4
 80035a4:	462b      	mov	r3, r5
 80035a6:	f04f 0000 	mov.w	r0, #0
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	0159      	lsls	r1, r3, #5
 80035b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b4:	0150      	lsls	r0, r2, #5
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4621      	mov	r1, r4
 80035bc:	1a51      	subs	r1, r2, r1
 80035be:	6139      	str	r1, [r7, #16]
 80035c0:	4629      	mov	r1, r5
 80035c2:	eb63 0301 	sbc.w	r3, r3, r1
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035d4:	4659      	mov	r1, fp
 80035d6:	018b      	lsls	r3, r1, #6
 80035d8:	4651      	mov	r1, sl
 80035da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035de:	4651      	mov	r1, sl
 80035e0:	018a      	lsls	r2, r1, #6
 80035e2:	4651      	mov	r1, sl
 80035e4:	ebb2 0801 	subs.w	r8, r2, r1
 80035e8:	4659      	mov	r1, fp
 80035ea:	eb63 0901 	sbc.w	r9, r3, r1
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003602:	4690      	mov	r8, r2
 8003604:	4699      	mov	r9, r3
 8003606:	4623      	mov	r3, r4
 8003608:	eb18 0303 	adds.w	r3, r8, r3
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	462b      	mov	r3, r5
 8003610:	eb49 0303 	adc.w	r3, r9, r3
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003622:	4629      	mov	r1, r5
 8003624:	024b      	lsls	r3, r1, #9
 8003626:	4621      	mov	r1, r4
 8003628:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800362c:	4621      	mov	r1, r4
 800362e:	024a      	lsls	r2, r1, #9
 8003630:	4610      	mov	r0, r2
 8003632:	4619      	mov	r1, r3
 8003634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003636:	2200      	movs	r2, #0
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
 800363a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800363c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003640:	f7fc fdca 	bl	80001d8 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4613      	mov	r3, r2
 800364a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800364c:	e058      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364e:	4b38      	ldr	r3, [pc, #224]	; (8003730 <HAL_RCC_GetSysClockFreq+0x200>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	099b      	lsrs	r3, r3, #6
 8003654:	2200      	movs	r2, #0
 8003656:	4618      	mov	r0, r3
 8003658:	4611      	mov	r1, r2
 800365a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800365e:	623b      	str	r3, [r7, #32]
 8003660:	2300      	movs	r3, #0
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
 8003664:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003668:	4642      	mov	r2, r8
 800366a:	464b      	mov	r3, r9
 800366c:	f04f 0000 	mov.w	r0, #0
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	0159      	lsls	r1, r3, #5
 8003676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800367a:	0150      	lsls	r0, r2, #5
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4641      	mov	r1, r8
 8003682:	ebb2 0a01 	subs.w	sl, r2, r1
 8003686:	4649      	mov	r1, r9
 8003688:	eb63 0b01 	sbc.w	fp, r3, r1
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003698:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800369c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036a0:	ebb2 040a 	subs.w	r4, r2, sl
 80036a4:	eb63 050b 	sbc.w	r5, r3, fp
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	00eb      	lsls	r3, r5, #3
 80036b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036b6:	00e2      	lsls	r2, r4, #3
 80036b8:	4614      	mov	r4, r2
 80036ba:	461d      	mov	r5, r3
 80036bc:	4643      	mov	r3, r8
 80036be:	18e3      	adds	r3, r4, r3
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	464b      	mov	r3, r9
 80036c4:	eb45 0303 	adc.w	r3, r5, r3
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036d6:	4629      	mov	r1, r5
 80036d8:	028b      	lsls	r3, r1, #10
 80036da:	4621      	mov	r1, r4
 80036dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e0:	4621      	mov	r1, r4
 80036e2:	028a      	lsls	r2, r1, #10
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ea:	2200      	movs	r2, #0
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	61fa      	str	r2, [r7, #28]
 80036f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f4:	f7fc fd70 	bl	80001d8 <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4613      	mov	r3, r2
 80036fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCC_GetSysClockFreq+0x200>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	3301      	adds	r3, #1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800371a:	e002      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetSysClockFreq+0x204>)
 800371e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003724:	4618      	mov	r0, r3
 8003726:	3750      	adds	r7, #80	; 0x50
 8003728:	46bd      	mov	sp, r7
 800372a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	00f42400 	.word	0x00f42400
 8003738:	007a1200 	.word	0x007a1200

0800373c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_RCC_GetHCLKFreq+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000010 	.word	0x20000010

08003754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07b      	b.n	800385e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003776:	d009      	beq.n	800378c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	61da      	str	r2, [r3, #28]
 800377e:	e005      	b.n	800378c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f85d 	bl	8003866 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003810:	ea42 0103 	orr.w	r1, r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	f003 0104 	and.w	r1, r3, #4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	f003 0210 	and.w	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800384c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <memset>:
 800387a:	4402      	add	r2, r0
 800387c:	4603      	mov	r3, r0
 800387e:	4293      	cmp	r3, r2
 8003880:	d100      	bne.n	8003884 <memset+0xa>
 8003882:	4770      	bx	lr
 8003884:	f803 1b01 	strb.w	r1, [r3], #1
 8003888:	e7f9      	b.n	800387e <memset+0x4>
	...

0800388c <__libc_init_array>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	4d0d      	ldr	r5, [pc, #52]	; (80038c4 <__libc_init_array+0x38>)
 8003890:	4c0d      	ldr	r4, [pc, #52]	; (80038c8 <__libc_init_array+0x3c>)
 8003892:	1b64      	subs	r4, r4, r5
 8003894:	10a4      	asrs	r4, r4, #2
 8003896:	2600      	movs	r6, #0
 8003898:	42a6      	cmp	r6, r4
 800389a:	d109      	bne.n	80038b0 <__libc_init_array+0x24>
 800389c:	4d0b      	ldr	r5, [pc, #44]	; (80038cc <__libc_init_array+0x40>)
 800389e:	4c0c      	ldr	r4, [pc, #48]	; (80038d0 <__libc_init_array+0x44>)
 80038a0:	f000 f818 	bl	80038d4 <_init>
 80038a4:	1b64      	subs	r4, r4, r5
 80038a6:	10a4      	asrs	r4, r4, #2
 80038a8:	2600      	movs	r6, #0
 80038aa:	42a6      	cmp	r6, r4
 80038ac:	d105      	bne.n	80038ba <__libc_init_array+0x2e>
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b4:	4798      	blx	r3
 80038b6:	3601      	adds	r6, #1
 80038b8:	e7ee      	b.n	8003898 <__libc_init_array+0xc>
 80038ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80038be:	4798      	blx	r3
 80038c0:	3601      	adds	r6, #1
 80038c2:	e7f2      	b.n	80038aa <__libc_init_array+0x1e>
 80038c4:	0800391c 	.word	0x0800391c
 80038c8:	0800391c 	.word	0x0800391c
 80038cc:	0800391c 	.word	0x0800391c
 80038d0:	08003920 	.word	0x08003920

080038d4 <_init>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr

080038e0 <_fini>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr
